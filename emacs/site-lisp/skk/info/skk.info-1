Info file: skk.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `skk.texi'
using `texinfmt.el' version 2.42 of  7 Jul 2006.

INFO-DIR-SECTION Emacs
INFO-DIR-SECTION GNU Emacs Lisp
START-INFO-DIR-ENTRY
* SKK: (skk).           Simple Kana to Kanji conversion program.
END-INFO-DIR-ENTRY



 Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

 Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

 Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the author.


File: skk.info, Node: Top, Next: はじめに, Prev: (dir), Up: (dir)

SKK
***

 (最終更新日: $Date: 2007/08/12 00:03:12 $)

 これは `SKK マニュアル' 第 13.1 版です。SKK のバージョン 13.1 に対応し
ています。


* Menu:

* はじめに::
* インストール::
* はじめの設定::
* 基本的な使い方::
* 便利な応用機能::
* 辞書ツール::
* 旧バージョンからの変更点::
* 拡張アイディア::
* SKKメーリングリスト::
* DDSKKの入手方法::
* SKK関連ソフトウェア::
* 最新情報など::
* SKKの歴史::
* よくある質問とその回答(FAQ)::
* 事項索引::
* 変数索引::
* 関数索引::
* キー索引::



File: skk.info, Node: はじめに, Next: インストール, Prev: Top, Up: Top

はじめに
********

 Daredevil SKK (以下 `DDSKK' といいます (1) ) は高速で効率的な日本語入
力環境を提供するシステムです。GNU General Public License に従ったフリー・
ソフトウェアとして配布されます。

 DDSKK 13.1 が動作を保証する Emacsen のバージョンは下記の通りです。

   - Emacs 20.7 以降
   - Emacs 21.1 以降
   - Emacs 22.1
   - Mule 機能付きでコンパイルされた XEmacs 21.4.18 以降
   - Mule 機能付きでコンパイルされた XEmacs 21.5.28

なお、XEmacs に関して、本体と別配布のパッケージ群は最新版が要求されます。
少なくとも xemacs-base パッケージは最新でなければなりません。また、
fsf-compat パッケージが動作のために必須です。

 全体として、現在は XEmacs より GNU Emacs での動作がよくテストされてお
り、XEmacs でのより多くのテストが必要です。

元来、SKK は、Simple Kana to Kanji conversion program にちなんで名付けら
れました。また、その名は Combinatory Logic での有名な等式 `SKK = I'
にも由来しています (2) 。

 DDSKK の主な特徴は、次の通りです。

   * 多彩な入力方式サポート。ローマ/かな 両対応のかな入力のほが、
     T-Code、TUT-code による入力も可能。
   * 文法的知識を用いない高速な「かな → 漢字」変換。
   * 辞書に登録されていない単語の登録が簡単。
   * 個人辞書への単語の自動登録による変換の高ヒット。
   * マイナーモードとして実装されているので、メジャーモードにほとんど影
     響を与えない。つまり、Emacs との親和性が高い。
   * DDSKK 本体 (Emacs Lisp) と辞書のみで動作(サーバは必須ではない)。辞
     書サーバがダウンしていても使用できる。
   * 辞書サーバを使うことで、使用メモリを削減可能。
   * ディスク容量に応じて選べる辞書。
   * Emacs のオリジナルと同様の操作で行える日本語インクリメンタル・サーチ。
   * Emacs Lisp で書かれたプログラムを変換候補にできる。

SKK の名の前に付いている `Daredevil' が気になる繊細な方は
*Note Q.1-2 Daredevil SKK って SKK とは違うのですか?:: をご参照下さい。

--------- Footnotes ---------

(1)  但し、`SKK モー
ド'、`SKK 辞書'、`SKK サーバ' など、歴史的に `SKK' の名を
冠して呼ばれるものにあえて `DDSKK' の名を付すことをしておりません。
また、`SKK' 方式の入力方法を採用したプログラムなど、広く SKK family
を意味する場合も同様です。

(2) `SKK = I' について詳しくは
`http://openlab.jp/skk/SKK.html' をご参照下さい。



File: skk.info, Node: インストール, Next: はじめの設定, Prev: はじめに, Up: Top

インストール
************

* Menu:

* APEL のインストール::
* DDSKK のインストール::
* 辞書の入手::
* 辞書サーバの入手::



File: skk.info, Node: APEL のインストール, Next: DDSKK のインストール, Prev: インストール, Up: インストール

APEL のインストール
===================

 DDSKK 13 は種々の Emacsen での動作を可能とするため APEL (A Portable
Emacs Library) を使用します。DDSKK 13.1 は APEL 10.7 での動作を確認して
いますが、 APEL は Emacs/XEmacs のバージョンアップに合わせて日進月歩な
ので、できるだけ新しいバージョンをインストールすることをお勧めします。

     `http://kanji.zinbun.kyoto-u.ac.jp/%7Etomo/lemi/dist/apel/'
     `ftp://ftp.jpl.org/pub/elisp/apel/'

より入手できます。

 DDSKK のインストールをする前に APEL をインストールして下さい。

     *Note Q.2-4 APEL って何ですか?::.



File: skk.info, Node: DDSKK のインストール, Next: 辞書の入手, Prev: APEL のインストール, Up: インストール

DDSKK のインストール
====================

 APEL をインストールしたら、 DDSKK をインストールしましょう。ここでは、
UNIX 上で `make' コマンドが用意されている場合を想定しています (1) 。

 まず、`tar' と `gzip' コマンドを使用して、 DDSKK を書庫
(`ddskk-VERSION.tar.gz') から取り出します。

     % gzip -cd ddskk-VERSION.tar.gz | tar xvf -

DDSKK のトップディレクトリ (`ChangeLog' や `Makefile' のあるディレクト
リ)をカレントディレクトリにします。

     % make what-where

と実行すると、どのディレクトリにインストールされるか確認できます。
ここで、DDSKK のインストール先ディレクトリが表示されない場合は、APEL の
path を `SKK-CFG' に記入します。`SKK-CFG' に設定方法が書いてあ
ります。また、インストール先ディレクトリを変更したい場合も、
`SKK-CFG' ファイルを編集することにより指定できます。

 つぎにスーパーユーザになって、

     % make install

とすると、実際にインストールされます。

 あるいは、一般ユーザが自分の home directory を root directory としてイ
ンストールするには、

     % make install PREFIX=~/

とします。

 特定の Emacs を指定する場合は、

     % make install EMACS=mule

とすると指定できます。

 XEmacs でパッケージとしてインストールする場合は、

     % make what-where-package

を実行すると、パッケージのインストール先が表示されます。

     % make install-package

を実行すると実際にインストールします。

`make' する際、SHELL の環境変数 `SKK_DEFAULT_JISYO' に SKK
辞書のファイル名(フルパス)がセットされていると、その辞書の内容を
`skk-dic.el' の中に取り込み、辞書検索関数として
`skk-search-small-dic' が使えるようになります。
`SKK_DEFAULT_JISYO' には通常、`SKK-JISYO.S' を指定すると良い
でしょう。*Note 複数辞書の検索方法::.

--------- Footnotes ---------

 (1) Windows 環境では、`makeit.bat' を使用することにより、同様の操作で
インストールできます。 次の資料を参照してください。

     `http://openlab.jp/skk/skk/main/READMEs/README.w32.ja'

 cygwin 環境をインストールされている方は `make' コマンドが使用できるの
で、ここの説明がそのまま当てはまります。

 また、Mac OS 環境の方は以下の資料を参照してください。

     `http://openlab.jp/skk/skk/main/READMEs/README.MacOSX.ja'
     `http://openlab.jp/skk/skk/main/READMEs/README.Mac.ja'




File: skk.info, Node: 辞書の入手, Next: 辞書サーバの入手, Prev: DDSKK のインストール, Up: インストール

辞書の入手
==========

 DDSKK を使用するには、辞書が必要です。DDSKK 本体 (elisp) には S 辞書が
附属します。それ以外の辞書は、必要に応じ別途入手して下さい。

SKK 各辞書の解説とダウンロード
      `http://openlab.jp/skk/wiki/wiki.cgi?page=SKK%BC%AD%BD%F1'

 用意されている辞書は、従来からの

   - SKK-JISYO.S : S 辞書(主に単漢字が登録。最小限必要な語を収録)
   - SKK-JISYO.M : M 辞書(普通に使う分には足りる程度)
   - SKK-JISYO.ML: M 辞書と L 辞書の中間のサイズの辞書。L 辞書収録語の
     内、EPWING 辞書やオンライン辞書で正しいと判別された語をベースにし
     て加除。
   - SKK-JISYO.L : L 辞書(あらゆる単語を収録)

に加えて、

   - zipcode           : 郵便番号辞書
   - SKK-JISYO.JIS2    : JIS Level 2 辞書
   - SKK-JISYO.public+ : public+ 辞書
   - SKK-JISYO.JIS3_4  : JIS Level 3, 4 辞書
   - SKK-JISYO.edict   : edict 辞書(英和辞書)
   - SKK-JISYO.wrong : 間違い辞書(S, M, L 辞書に既に登録されていたが、
     間違いであったので削除された単語を収録)

などがあります (1) 。

--------- Footnotes ---------

 (1) 一部の辞書の著作権は GNU GPL 2 とは異なるものがありますのでご注意
下さい。詳細は以下の資料を参照して下さい。

     `http://openlab.jp/skk/skk/dic/READMEs/committers.txt'




File: skk.info, Node: 辞書サーバの入手, Prev: 辞書の入手, Up: インストール

辞書サーバの入手
================

 辞書サーバはオプションですので無くても DDSKK は動作しますが、特に辞書
が大きな場合に辞書サーバを利用することで省メモリ効果を得られます。また、
辞書サーバによっては複数辞書の検索、EPWING 辞書の検索ができたりするもの
もあります。

 DDSKK のクライアント側は特定の辞書サーバの実装に依存していませんので、
下記の辞書サーバのいずれでも動作可能です。ソースやバイナリの入手、イン
ストールについてはそれぞれのウェブサイトをご参照下さい。

SKK サーバの説明とリンク
     `http://openlab.jp/skk/skkserv-ja.html'



File: skk.info, Node: はじめの設定, Next: 基本的な使い方, Prev: インストール, Up: Top

はじめの設定
************

 DDSKK 11 以降、設定が非常に簡単になりました。DDSKK 13 では、標準的なイ
ンストールの場合、なにも設定せず Emacs を起動するだけで使える状態になっ
ています。自動的に `skk-setup.el' というファイルが読み込まれ、設定され
ます。

 もし、この自動設定によらず、手動で設定をしたい場合は、以下の説明を参照
してください。

* Menu:

* 最も基本的な設定::
* インクリメント検索の設定::
* 古い設定のチェック::
* 辞書サーバを使いたいときの設定::



File: skk.info, Node: 最も基本的な設定, Next: インクリメント検索の設定, Prev: はじめの設定, Up: はじめの設定

最も基本的な設定
================

自動設定によらず、手動で設定する場合は、以下のように `~/.emacs' に書
きます (1) 。

     (require 'skk-autoloads)
     (global-set-key "\C-x\C-j" 'skk-mode)
     (global-set-key "\C-xj" 'skk-auto-fill-mode)
     (global-set-key "\C-xt" 'skk-tutorial)

ただし XEmacs でパッケージとしてインストールをした場合は、

     (require 'skk-autoloads)

の記述はしません。

 サーバを使わない場合は、更に辞書ファイルを指定する必要があります。

     (setq skk-large-jisyo "/your/path/to/SKK-JISYO.L")

この場合 `skk-large-jisyo' は Emacs のバッファに取り込んで使用します。
これによりメモリが圧迫されすぎる場合は、上記の `SKK-JISYO.L' を
`SKK-JISYO.M'、`SKK-JISYO.ML' または `SKK-JISYO.S' に変更します。

--------- Footnotes ---------

(1)  サンプルとして、配布物に `etc/dot.emacs'、
`etc/dot.skk' ファイルがあります。参考にして下さい。



File: skk.info, Node: インクリメント検索の設定, Next: 古い設定のチェック, Prev: 最も基本的な設定, Up: はじめの設定

インクリメント検索の設定
========================

 以下のように `~/.emacs' に書きます。

     (add-hook 'isearch-mode-hook
               #'(lambda ()
                   (when (and (boundp 'skk-mode)
                              skk-mode
                              skk-isearch-mode-enable)
                     (skk-isearch-mode-setup))))
     (add-hook 'isearch-mode-end-hook
               #'(lambda ()
                   (when (and (featurep 'skk-isearch)
                              skk-isearch-mode-enable)
                     (skk-isearch-mode-cleanup))))

上記の設定では、DDSKK が起動されているときのみ、付属のインクリメンタル・
サーチを使用します。常に付属のインクリメンタル・サーチを使用したかった
ら上記の`isearch-mode-hook'、 `isearch-mode-end-hook' の設定を下記の設
定に変更します。

     (add-hook 'isearch-mode-hook 'skk-isearch-mode-setup)
     (add-hook 'isearch-mode-end-hook 'skk-isearch-mode-cleanup)



File: skk.info, Node: 古い設定のチェック, Next: 辞書サーバを使いたいときの設定, Prev: インクリメント検索の設定, Up: はじめの設定

古い設定のチェック
==================

`skk-obsolete-check-all-files'

     このコマンドは、各個人の設定ファイルの古い設定を調べて、可能な限り
     新しい設定に書換えます。

 SKK 9、 SKK 10 と比較して、変数名、関数名が大幅に変更されたので、

     `skk-obsolete.el'

をロードし、

     M-x skk-obsolete-check-all-files

を実行することを強くお勧めします。



File: skk.info, Node: 辞書サーバを使いたいときの設定, Prev: 古い設定のチェック, Up: はじめの設定

辞書サーバを使いたいときの設定
==============================

 辞書サーバを使いたいときは、`~/.emacs' や `~/.skk' で以下のように設定
します。 (1)

     (setq skk-server-host "example.org")
     (setq skk-server-portnum 1178)

`skk-server-host'

     辞書サーバの走っているホスト名、または IP アドレス。

`skk-server-portnum'

     辞書サーバが使うポート番号。`/etc/services' に skkserv のエントリ
     があれば指定する必要は無い。


 辞書サーバが起動して無かった時、Emacs から skkserv プロセスを立ち上げ
る事もできます。`skk-server-inhibit-startup-server' を `nil' にする事で
この機能が有効になります。*Note サーバ関連:: も参照してください。

 Emacs から立ち上げて利用する事のできるサーバは、

     skkserv [-p port] [jisyo]

のようなオプションを受け付け、inetd などを経由せず直接起動するものに限
られます。

 サーバプログラムと辞書は次のように設定します。

     (setq skk-server-prog "/your/path/to/skkserv")
     (setq skk-server-jisyo "/your/path/to/SKK-JISYO.L")

`skk-server-prog'

     辞書サーバプログラム(フルパスで指定する)。

`skk-server-jisyo'

     サーバに渡す辞書(フルパスで指定する)。

これらの設定は、環境変数を利用して下記のようにすることもできます。

B シェルの場合 (sh, bash, ksh, zsh など)

          export SKKSERVER=example.org
          export SKKSERV=/your/path/to/skkserv
          export SKK_JISYO=/your/path/to/SKK-JISYO.L

C シェルの場合 (csh, tcsh など)

          setenv SKKSERVER example.org
          setenv SKKSERV /your/path/to/skkserv
          setenv SKK_JISYO /your/path/to/SKK-JISYO.L

--------- Footnotes ---------

(1)  辞書サーバの入手等については *Note 辞書サーバの入手:: を参照して
ください。



File: skk.info, Node: 基本的な使い方, Next: 便利な応用機能, Prev: はじめの設定, Up: Top

基本的な使い方
**************

 本章では、DDSKK の基本的な使用方法を説明します。これを読めば、とりあえ
ずDDSKK を使ってみるには充分です。

 DDSKK を使った入力方法に慣れるには、付属の*Note チュートリアル::プログ
ラムが最適なので、お試しください。

 なお、次章の「便利な応用機能」は、興味のある個所のみをピックアップして
お読みになるのがいいでしょう。

* Menu:

* 起動と終了::
* 入力モード::                  文字種別毎のモード
* 変換モード::                  辞書を用いた変換の状態毎のモード
* インクリメンタル・サーチ::
* チュートリアル::



File: skk.info, Node: 起動と終了, Next: 入力モード, Prev: 基本的な使い方, Up: 基本的な使い方

起動と終了
==========

 SKK モードに入るには `C-x C-j'、もしくは `C-x j' とタイプします。モー
ドラインの左端には、下記のように `--かな:' が追加されます。 (1)

     --かな:MULE/7bit----- Buffer-name (Major-mode)---

また、カーソルの色が変化します (2) 。

`C-x C-j'、もしくは `C-x j' を再度タイプすることで、SKK モードに
入る前のモードに戻り、カーソル色も元に戻ります。 (3)

* Menu:

* SKKオートフィルモード::
* 辞書の保存::

--------- Footnotes ---------

(1)  次の設定をしているときはマイナーモードの表示に追加されます。

     (setq skk-status-indicator 'minor)


 (2) カラーディスプレイを使用し、カラー表示をサポートしているWindow
System 下で対応する Emacs を使用している場合。

*Note 入力モードを示すカーソル色に関する設定::.

 (3) 但し、「アスキーモード」を利用すれば SKK モードから抜ける必要はほ
とんどありません。

*Note アスキーモード: 入力モード.



File: skk.info, Node: SKKオートフィルモード, Next: 辞書の保存, Prev: 起動と終了, Up: 起動と終了

SKKオートフィルモード
---------------------

 `C-x j' とタイプすれば、SKK モードに入ると同時にオートフィルモード
(*Note Auto Fill: (emacs)Auto Fill.)  をオンにします。

 既にオートフィルモードがオンになっているバッファで `C-x j'をタイプする
と、オートフィルモードは逆にオフになるので注意してください。

 バッファの状態にかかわらず強制的にオートフィルモード付で SKK モードに
入りたい場合は、`M-1 C-x j' や `C-u C-x j' などとタイプし、このコマンド
に正の引数を渡します (1) 。

オートフィルモードをオフにし、かつ SKK モードも終了したい場合には
`M-- C-x j' や `C-u -1 C-x j' などとタイプし、このコマン
ドに負の引数を渡します。

--------- Footnotes ---------

(1)  「引数」については、

     *Note Arguments: (emacs)Arguments

を参照のこと。



File: skk.info, Node: 辞書の保存, Prev: SKKオートフィルモード, Up: 起動と終了

辞書の保存
----------

 `C-x C-c' で Emacs を終了しようとすると `~/.skk-jisyo' に個人辞書
(*Note 個人辞書: 辞書の種別.)の内容を自動的に保存します。

`~/.skk-jisyo.BAK' に保存を行う前の辞書が退避されます。

 `~/.skk-jisyo' や `~/.skk-jisyo.BAK' のファイル名を変更したければそれ
ぞれ `skk-jisyo' や `skk-backup-jisyo' の値を変更して下さい。

`skk-kill-emacs-without-saving-jisyo'

     個人辞書を保存せず Emacs を終了させたい場合には、

          M-x skk-kill-emacs-without-saving-jisyo

     とタイプします。

 個人辞書の保存動作について更に詳しくは、*Note 個人辞書の保存動作:: を
参照してください。



File: skk.info, Node: 入力モード, Next: 変換モード, Prev: 起動と終了, Up: 基本的な使い方

入力モード
==========

 SKK モードは、文字種類による 4 種類の「入力モード」と、辞書を用いた変
換の状態により 3 つの「変換モード」を持ちます。

 入力モードは、文字種別により

   「かなモード」
   「カナモード」
   「全英モード」
   「アスキーモード」

 の 4 種類に分類されます。

* Menu:

* 入力モードの説明::
* 入力モードを切り替えるキー::



File: skk.info, Node: 入力モードの説明, Next: 入力モードを切り替えるキー, Prev: 入力モード, Up: 入力モード

入力モードの説明
----------------

「かなモード」

        ASCII の小文字をひらがなに変換するモード。
        マイナーモードの表示: `かな'
        カーソル色: 赤系

「カナモード」

        ASCII 小文字をカタカナに変換するモード。
        マイナーモードの表示: `カナ'
        カーソル色: 緑系

「全英モード」

        ASCII 小文字、大文字を全角アルファベットに変換するモード。
        マイナーモードの表示: `全英'
        カーソル色: 黄系

「アスキーモード」

        文字変換を行わないモード。入力されたキーは `C-j' を除いて通
          常の Emacs のコマンドとして解釈される。
        マイナーモードの表示: `SKK'
        カーソル色: 背景によりアイボリーかグレイ。

入力モードに伴うカーソル色の変更方法については、
*Note 入力モードを示すカーソル色に関する設定:: を参照してください。



File: skk.info, Node: 入力モードを切り替えるキー, Prev: 入力モードの説明, Up: 入力モード

入力モードを切り替えるキー
--------------------------

`q'
     「かなモード」、「カナモード」間をトグルする。

`l'
     「かなモード」または「カナモード」から「アスキーモード」へ。

`L'
     「かなモード」または「カナモード」から「全英モード」へ。

`C-j'
     「アスキーモード」または「全英モード」から「かなモード」へ。

実際にはカナモードや全英モードで長時間入力を続けることはほとんどないの
で、かなモードのままでカナ文字や全英文字を入力する便法が用意されています。
*Note 入力モードの一時変更::.



File: skk.info, Node: 変換モード, Next: インクリメンタル・サーチ, Prev: 入力モード, Up: 基本的な使い方

変換モード
==========

 変換モードは、次の 3 種類のいずれかです。

「■モード(確定入力モード)」

     あるキー入力に対応する文字列を、辞書を用いた文字変換を行わずに直接
     バッファへ入力するモード。入力モードに応じてローマ字からひらがな、
     ローマ字からカタカナ、あるいはアスキー文字から全角アルファベットへ
     の文字変換を行う。

「▽モード」

     辞書変換の対象となる文字列、「見出し語」を入力するモード。

「▼モード」

     見出し語について、辞書変換を行うモード。

 また、▽モードの変種として"SKK abbrev mode"があり、▼モードのサブモー
ドとして、「辞書登録モード」があります。

* Menu:

* ■モード::                    辞書変換を行わない確定入力のモード。
* ▽モード::                    辞書変換のため見出し語の入力を行うモード。
* ▼モード::                    辞書変換を行うモード。
* 辞書登録モード::              個人辞書への単語登録を行うモード。



File: skk.info, Node: ■モード, Next: ▽モード, Prev: 変換モード, Up: 変換モード

■モード
--------

 確定入力モードを「■モード」と呼びます。■モードでは、あるキー入力に対
応した特定の文字列への変換を行うだけで、辞書変換は行いません。ASCII 文
字列から、入力モードに応じて、ひらがな、カタカナ、あるいは全角アルファ
ベットへの文字変換を行います。変換を行うカレントバッファにこのモード特
有のマークは表示されません。

 かなモード、カナモードで、かつ ■モードである場合、デフォルトの入力方
法はいわゆるローマ字入力です。訓令式、ヘボン式のどちらによっても入力す
ることができます。主な注意点を以下に説明します。

   * `ん'は `n n' または `n '' で入力する。直後に `n'、
     `y' 以外の子音が続くときは `n' だけで入力できる。

   * 促音は、`c h o t t o' => `ちょっと'、`m o p p a r a'
     => `もっぱら'のように次の子音を重ねて入力する。

   * 促音や拗音(ひらがなの小文字)を単独で入力するときは、`x a' =>
     `ぁ'、`x y a' => `ゃ'などのように `x' を用いる。

   * 長音には、`-'を用いる。`-'=>`ー'。



File: skk.info, Node: ▽モード, Next: ▼モード, Prev: ■モード, Up: 変換モード

▽モード
--------

 「▽モード」では、辞書変換の対象となる文字列を入力します。かなモード、
もしくはカナモード (1) で、かつ、■モードであるときに、キー入力を大文字
で開始することで、▽モードに入ります。例えば、

     K a n j i

     ------ Buffer: foo ------
     ▽かんじ
     ------ Buffer: foo ------

のようにタイプすることで、▽モードに入り、続けて辞書変換の対象となる文
字列、「見出し語」を入力してゆくことができます。`▽'マークは、▽モード
であるという表示ですが、見出し語開始点を示す表示でもあります。

* Menu:

* 後から▽モードに入る方法::
* ▽モードを抜ける方法::

--------- Footnotes ---------

(1)  *Note かなモード、カナモード: 入力モード.



File: skk.info, Node: 後から▽モードに入る方法, Next: ▽モードを抜ける方法, Prev: ▽モード, Up: ▽モード

後から▽モードに入る方法
........................

 辞書変換の対象としたい文字列について、先頭の文字を大文字で入力し忘れた
場合は、その位置までポイント (1) を戻し `Q' をタイプすることで、▽モー
ドに入ることができます。例えば、下記のように操作します (-!- の地点にカー
ソルがあります)。

     k a n j i

     ------ Buffer: foo ------
     かんじ-!-
     ------ Buffer: foo ------

     C-u 3 C-b, Q

     ------ Buffer: foo ------
     ▽-!-かんじ
     ------ Buffer: foo ------

     C-e

     ------ Buffer: foo ------
     ▽かんじ-!-
     ------ Buffer: foo ------

 `7がつ24にち' のように大文字から始めることができない文字列についても、
▽モードにしたい場合は `Q' をタイプし、▽モードにしてから `7がつ24にち'
の文字列を入力します。なお、▽モードでは、文字列の間に空白を含めること
はできません (2) 。

--------- Footnotes ---------

(1)  *Note ポイント: (emacs)Point.

(2) これは、辞書の見出し語に空白を含めることができない制限からきていま
す。



File: skk.info, Node: ▽モードを抜ける方法, Prev: 後から▽モードに入る方法, Up: ▽モード

▽モードを抜ける方法
....................

 誤って▽モードに入ってしまったときは `C-j' とタイプし、■モードに戻る
か `C-g' とタイプし▽モードで辞書変換と対象となっている文字列を消去する
かの 2 通りの処理の方法があります。具体例を下記に示します。

     K a n j i

     ------ Buffer: foo ------
     ▽かんじ
     ------ Buffer: foo ------

     C-j

     ------ Buffer: foo ------
     かんじ
     ------ Buffer: foo ------

あるいは、

     K a n j i

     ------ Buffer: foo ------
     ▽かんじ
     ------ Buffer: foo ------

     C-g

     ------ Buffer: foo ------

     ------ Buffer: foo ------



File: skk.info, Node: ▼モード, Next: 辞書登録モード, Prev: ▽モード, Up: 変換モード

▼モード
--------

「▼モード」 では、▽モードで入力した見出し語を、辞書に従い変換する作
業を行います。▽モードで見出し語を入力した後 SPC をタイプするこ
とで▼モードに入ります。`▽' マークから SPC をタイプしたとき
のポイントまでの文字列が見出し語として確定され、 `▽' マークは
`▼' マークで置き換えられ、この文字列が辞書の中で検索されます。

* Menu:

* 送り仮名が無い場合::
* 次候補・前候補::
* 送り仮名が有る場合::



File: skk.info, Node: 送り仮名が無い場合, Next: 次候補・前候補, Prev: ▼モード, Up: ▼モード

送り仮名が無い場合
..................

 仮に、辞書に

     かんじ /漢字/幹事/

というエントリ (1) を含むとして、例を示します。

     K a n j i

     ------ Buffer: foo ------
     ▽かんじ-!-
     ------ Buffer: foo ------

     SPC

     ------ Buffer: foo ------
     ▼漢字-!-
     ------ Buffer: foo ------

この例では、▽モードにおける `▽' マークからポイントまでの間の文字列`か
んじ' を辞書変換の対象文字列として確定し、それについて辞書内での検索を
行っています。実際の変換動作では、候補部分がハイライト表示されます (2)
。

 `漢字' が求める語である場合は `C-j' をタイプすれば、この変換が確定しま
す。ハイライト表示も `▼' マークも消えます。

 また `C-j' をタイプせずに、新たな確定入力を続けて行うか、または新たな
変換を開始すると、直前の変換は自動的に確定されます。これを 「暗黙の確定」
と呼んでいます。副作用として確定を伴うキーは、印字可能な文字全てと RET
です。ただし、*Note 暗黙の確定のタイミング:: を参照してください。

--------- Footnotes ---------

(1)  本マニュアルでは、見出し語と候補群を合わせた一行を「エントリ」
と呼びます。詳細は、*Note 送りありエントリと送りなしエントリ::を参照してく
ださい。

(2) ハイライト表示は FSF Emacs の Overlays、XEmacs の extent の機能を使
用しています。



File: skk.info, Node: 次候補・前候補, Next: 送り仮名が有る場合, Prev: 送り仮名が無い場合, Up: ▼モード

次候補・前候補
..............

 求めるものがすぐに出なければ、更に続けて SPC をタイプすることで、次候
補を検索します。

     ------ Buffer: foo ------
     ▼漢字
     ------ Buffer: foo ------

     SPC

     ------ Buffer: foo ------
     ▼幹事
     ------ Buffer: foo ------

 候補が 5 つ以上あるときは 5 番目以降の候補は 7 つずつまとめてエコーエ
リアに表示されます。例えば、辞書が

     きょ /距/巨/居/裾/嘘/拒/拠/虚/挙/許/渠/据/去/

というエントリを含むときに `K y o' の後に SPC を 5 回続けて打てば、

     -------------------- Echo Area --------------------
     A:嘘  S:拒  D:拠  F:虚  J:挙  K:許  L:渠  [残り 2]
     -------------------- Echo Area --------------------

がエコーエリア (1) に表示されます。ここで仮に `許' を選択したければ、
`k' を入力します。

 `A', `S', `D', `F', `J', `K', `L' の各文字は、押し易さを考慮してキーボー
ドのホームポジションから横方向に一直線に配置されているキーが選ばれてい
ます。また、候補の選択のために押すキーは、大文字、小文字のいずれでも構
いません。候補の選択に用いるキーの変更については、*Note 候補の選択に用
いるキー:: を参照してください。

SPC を連打してしまい、誤って求める候補を通過してしまったときは
`x' により前候補/前候補群に戻ることができます (2) 。

候補を次々と探しても求めるものがなければ、自動的に辞書登録モードになります
(辞書登録モードは▼モードのサブモードです) 。
*Note 辞書登録モード::にて説明します。

--------- Footnotes ---------

(1)  エコーエリアとミニバッファは視覚的には同一の場所にありますが、
エコーエリアが単にユーザーへのメッセージを表示するのみであるのに対し、ミ
ニバッファは独立のバッファとして機能する点が違います。

(2) `x' は小文字で入力する必要があります



File: skk.info, Node: 送り仮名が有る場合, Prev: 次候補・前候補, Up: ▼モード

送り仮名が有る場合
..................

 次に送り仮名のある単語について説明します。

 `動く' を変換により求めたいときは `U g o K u' のように、まず ▽モード
に入るために `U' を大文字で入力し、次に送り仮名の開始を DDSKK に教える
ために `K' を大文字で入力します。送り仮名の `K' をタイプした時点で SPC
をタイプすることなく、▼モード に入り辞書変換が行われます。

 送り仮名の入力時、ローマ字プレフィックスが挿入された瞬間に、プレフィッ
クスの直前に `*' を一瞬挿入し、送り仮名の開始時点を明示します。プレフィッ
クスに続くキー入力で、かな文字が完成した時点で`*'は消えます。

 キー入力を分解して追いながらもう少し詳しく説明します。

     U g o

     ------ Buffer: foo ------
     ▽うご
     ------ Buffer: foo ------

     K

     ------ Buffer: foo ------
     ▽うご*k
     ------ Buffer: foo ------

     u

     ------ Buffer: foo ------
     ▼動く
     ------ Buffer: foo ------

 DDSKK ではこのように、送り仮名の開始地点をユーザーが明示的に入力するの
で、システム側で送り仮名を分解する必要がありません。これにより、高速で
ヒット効率が高い変換が可能になります。*Note 送り仮名の自動処理::.

 但しサ変動詞の変換では、サ変動詞の語幹となる名詞を 「送りなし変換」
(1) として変換し、その後 `する' を■モードで入力した方が効率が良くなり
ます。*Note サ変動詞の入力: サ変動詞の辞書登録に関する注意.

--------- Footnotes ---------

(1)  詳細は、*Note 送り仮名が無い場合::を参照してください。



File: skk.info, Node: 辞書登録モード, Prev: ▼モード, Up: 変換モード

辞書登録モード
--------------

 DDSKK には独立の辞書登録モードはありません。その代わり、辞書にない単語
についての変換を行った場合に、自動的に辞書登録モードに入ります。例えば
辞書に

     へんかんちゅう /変換中/

のエントリがない場合に、`変換中' を入力しようとして、`H e n
k a n t y u u SPC' とタイプすると、下記のように、カレントバッファ
は ▼モード のまま `へんかんちゅう' に対して変換ができない状態で休
止し、同時にミニバッファに `へんかんちゅう' というプロンプトが表示
されます。

     ------ Buffer: foo ------
     ▼へんかんちゅう
     ------ Buffer: foo ------

     ------ Minibuffer -------
     へんかんちゅう-!-
     ------ Minibuffer -------

* Menu:

* 送り仮名が無い場合の辞書登録::
* 送り仮名が有る場合の辞書登録::
* サ変動詞の辞書登録に関する注意::
* 再帰的辞書登録::
* 改行文字を含む辞書登録::



File: skk.info, Node: 送り仮名が無い場合の辞書登録, Next: 送り仮名が有る場合の辞書登録, Prev: 辞書登録モード, Up: 辞書登録モード

送り仮名が無い場合の辞書登録
............................

辞書登録モードでは、入力はミニバッファに対して行われます。仮に辞書に

     へんかん /変換/
     ちゅう /中/

のようなエントリがあるとして、ミニバッファで`変換中'の文字列を
`変換'と`中'とに分けて作ります。

     H e n k a n SPC T y u u SPC

     ------ Minibuffer -------
     へんかんちゅう 変換▼中
     ------ Minibuffer -------

ここで RET をタイプすれば `変換中' が個人辞書に登録され、辞書登録モード
は終了します (1) 。同時に、変換を行っているカレントバッファには、`変換
中' が挿入され確定されます。*Note 個人辞書: 辞書の種別.

 辞書登録モードを抜けたいときは `C-g' をタイプするか、または何も登録せ
ず RET をタイプすると▽モードに戻ります。

--------- Footnotes ---------

(1)  ここでは暗黙の確定が行われるので `C-j' をタイプする必要
はありません。ただし、*Note ▼モードでのRET:: を参照してください。



File: skk.info, Node: 送り仮名が有る場合の辞書登録, Next: サ変動詞の辞書登録に関する注意, Prev: 送り仮名が無い場合の辞書登録, Up: 辞書登録モード

送り仮名が有る場合の辞書登録
............................

 送り仮名のある単語の登録では、ミニバッファで作る候補に送り仮名そのもの
を登録しないように注意しなければいけません。仮に辞書に

     うごk /動/

というエントリがないとして、例を挙げて説明します。

     U g o K u

     ------ Buffer: foo ------
     ▼うごく
     ------ Buffer: foo ------

     ------ Minibuffer -------
     うご*く-!-
     ------ Minibuffer -------

ミニバッファで辞書登録すべき文字列は、`動' だけで、送り仮名の
`く' は含めてはいけません。 `動く' を登録してしまうと、次に
`U g o K u' とタイプしたときに出力される候補が `動くく' になっ
てしまいます (1) 。

     D o u SPC

     ------ Minibuffer -------
     うご*く 動-!-
     ------ Minibuffer -------

     RET

     ------ Buffer: foo ------
     動く
     ------ Buffer: foo ------

--------- Footnotes ---------

(1)  変数`skk-check-okurigana-on-touroku'が非
`nil' であれば、辞書登録時に送り仮名のチェックを行います。この変
数に、シンボル `ask'を設定すれば、ユーザに確認を求め、送り仮
名と認められれば送り仮名を取り除いてから登録します。シンボル
`auto'を設定すれば、ユーザに確認を求めず、勝手に送り仮名を判
断して削除してから登録します。`skk-check-okurigana-on-touroku'の
デフォルトは `nil' です。



File: skk.info, Node: サ変動詞の辞書登録に関する注意, Next: 再帰的辞書登録, Prev: 送り仮名が有る場合の辞書登録, Up: 辞書登録モード

サ変動詞の辞書登録に関する注意,
...............................

 サ変動詞 (名詞の後に `する' を付けた形で構成される動詞) については`す
る' を送り仮名とした送りあり変換 (1) をしないで、`運動' と `する' と分
けて入力した方が効率が良くなります (2) 。

 例えば `運動する' は `U n d o u SPC s u r u' とタイプすることにより入
力できます。名詞から作られる形容詞等も同様です。

--------- Footnotes ---------

(1)  送り仮名を伴う変換。
詳しくは、*Note 送り仮名が有る場合:: を参照してください。

(2) 名詞とそのサ変動詞とを別々に辞書に持つと空間的な効率が悪いので、基
本的に、辞書がサ変動詞を送りありとして意識した作りとしていません。その
ため、`する' を送り仮名とした送りあり変換では、辞書に候補がなく辞
書登録モードに入ってしまう可能性が高いので、名詞として分解して入力する
ことをお勧めします。一方で、このように名詞に分解して入力することで、サ
変動詞になり得ない名詞が候補として出てくることもあるので (例えば
`孝行する' という変換を行いたい場合に `高校' が出てくるなど)、
候補の絞り込みという点では必ずしも効率が良くありません。将来のバージョ
ンにおいてこの点を改善する方向で検討しています。詳しくは、*Note 拡張アイ ディア:: を参照してください。



File: skk.info, Node: 再帰的辞書登録, Next: 改行文字を含む辞書登録, Prev: サ変動詞の辞書登録に関する注意, Up: 辞書登録モード

再帰的辞書登録
..............

 ミニバッファを再帰的に使い辞書登録を再帰的に行うことができます。

 仮に辞書に

     さいきてき /再帰的/
     さいき /再帰/

のようなエントリがなく、かつ

     さい /再/
     き /帰/
     てき /的/

のようなエントリがあるとします。

 ここで `S a i k i t e k i SPC' とタイプすると、文字列 `さいきてき' に
対する候補を見つけられないので、ミニバッファに `さいきてき' というプロ
ンプトを表示して辞書登録モードに入ります。

 `さいきてき' に対する辞書エントリを作るため `S a i k i SPC' とタイプす
ると、更にこの候補も見つけられないので、ミニバッファに`さいき' というプ
ロンプトを表示して、再帰的に `さいき' の辞書登録モードに入ります。

`S a i SPC K i SPC'とタイプすると、ミニバッファは、

     ------ Minibuffer -------
     さいき 再▼帰
     ------ Minibuffer -------

となります。ここで RET をタイプすると、個人辞書には

     さいき /再帰/

というエントリが登録され、ミニバッファは `さいきてき' の辞書登録モード
に戻り、プロンプトは `さいきてき' となります。

今度は `再帰' が変換可能なので `S a i k i SPC T e k i
SPC' とタイプすると、

     ------ Minibuffer -------
     さいきてき 再帰▼的
     ------ Minibuffer -------

となります。ここで RET をタイプすることで、`さいきてき' の辞書登録モー
ドから抜け、個人辞書に

     さいきてき /再帰的/

というエントリが登録されます。カレントバッファのポイントには、`再帰的'
が挿入されます。



File: skk.info, Node: 改行文字を含む辞書登録, Prev: 再帰的辞書登録, Up: 辞書登録モード

改行文字を含む辞書登録
......................

改行文字を含む文字列を辞書に登録するには、辞書登録モードで改行文字を
`C-q C-j' により入力します。例えば、

     〒980
     仙台市青葉区片平2-1-1
     東北大学電気通信研究所

を辞書に登録するには、辞書登録モードで、

     `〒980',
     C-q C-j,
     `仙台市青葉区片平2-1-1',
     C-q C-j,
     `東北大学電気通信研究所',
     RET

と入力します。



File: skk.info, Node: インクリメンタル・サーチ, Next: チュートリアル, Prev: 変換モード, Up: 基本的な使い方

 インクリメンタル・サーチ
========================
DDSKK では、専用のインクリメンタル・サーチプログラムを Emacs 添付の
`isearch.el' のラッパーとして実装しているため、日本語の文字列についての
インクリメンタル・サーチをアスキー文字と同様の操作で行うことができます。

* Menu:

* skk-isearchの操作性::
* skk-isearchと入力モード::



File: skk.info, Node: skk-isearchの操作性, Next: skk-isearchと入力モード, Prev: インクリメンタル・サーチ, Up: インクリメンタル・サーチ

skk-isearchの操作性
-------------------

 大部分の動作は、オリジナルのインクリメンタル・サーチのままですから、オ
リジナルのインクリメンタル・サーチのコマンド (1) やユーザー変数でのカス
タマイズ (2) もそのまま利用できます。

オリジナルのインクリメンタル・サーチについては、
*Note Incremental Search: (emacs)Incremental Search
を参照してください。

 インクリメンタル・サーチ中の入力方法は、通常のバッファにおける各入力モー
ド、変換モードでの入力方法と同一です。

 `C-s' や `C-r'、あるいは `M-C-s' や `M-C-r' でインクリメンタル・サーチ
を起動すると、インクリメンタル・サーチを起動したバッファの入力モードと
同一の入力モードで、キーとなる文字の入力が可能となります。

--------- Footnotes ---------

(1)  `M-y' の `isearch-yank-kill' や `M-p' の
`isearch-ring-retreat', `M-n' の `isearch-ring-advance' な
ど

(2) `search-highlight' など



File: skk.info, Node: skk-isearchと入力モード, Prev: skk-isearchの操作性, Up: インクリメンタル・サーチ

skk-isearchと入力モード
-----------------------

 入力モードに合わせて、インクリメンタル・サーチのプロンプトが表示されま
す。プロンプトの種類は、以下の 5 つです。

I-search: [aa]
     アスキーモード

I-search: [か]
     かなモード

I-search: [カ]
     カナモード

I-search: [英]
     全英モード

I-search: [--]
     インクリメンタル・サーチモードで `C-x C-j' などをタイプして DDSKK
     を終了した場合は、このプロンプトが表示されます。



File: skk.info, Node: チュートリアル, Prev: インクリメンタル・サーチ, Up: 基本的な使い方

チュートリアル
==============

 DDSKK には、チュートリアルが附属しています。チュートリアルでは、
DDSKK の基本的な操作方法を学習できます。`M-x skk-tutorial' で実行します。
チュートリアルは、日本語 (`Japanese') と英語 (`English') が用意されてい
ます。英語を選択する場合は、`C-u M-x skk-tutorial [RET] English [RET]'
を実行します。

 チュートリアルファイルが、標準の場所にない場合は、 `~/.emacs' で

     (setq skk-tut-file "/usr/local/share/skk/SKK.tut")

と書くことにより、指定したチュートリアルファイルを使用させることが
できます。英語のチュートリアルファイルは、 `skk-tut-file' に `.E'
が付いたファイル名です。この場合であれば、
`/usr/local/share/skk/SKK.tut.E' になります。




File: skk.info, Node: 便利な応用機能, Next: 辞書ツール, Prev: 基本的な使い方, Up: Top

便利な応用機能
**************

* Menu:

* ファイル構成::                応用機能を使いこなすための予備知識。
* ユーザーオプションの設定方法::
* 入力モードの一時変更::        使用頻度の低い入力モードを一時的に利用する。
* ■モードにおける文字入力::    かな/カナ/全英モードでの文字入力の設定。
* ポイントを戻して▽モードへ::
* 確定変換とその取り消し::      確定操作なしに確定する変換方法とその取り消し。
* 確定アンドゥ::                候補の選択ミスに対する取り消し操作。
* 見出し語関連::                変換のキーとなる語の処理について。
* 送り仮名関連::                送り仮名の処理について。
* 変換の学習::
* ▽モードにおける自動ダイナミックコンプリーション::
* 自動変換開始::                SPC を押さずに変換開始。
* 特殊変換::                    ちょっと変った便利な変換方法。
* 接頭辞・接尾辞::              接頭辞・接尾辞を指定して候補を絞り込む。
* 暗黙の確定のタイミング::      変換の後、いつ確定するか。
* 領域一括変換::                スパッと領域一括変換。
* 漢字コード関連::              漢字コードにまつわる機能。
* ▼モードの特殊キー::          キーの動作、あるいはキー定義変更。
* 辞書関連::                    辞書にまつわる設定および機能。
* DDSKK 以外のツールを用いた辞書変換::
* 飾りつけ::                    様々な表示の設定。
* VIP/VIPERとの併用::
* I-search関連::                インクリメンタル・サーチにまつわる機能。
* skk-init-fileのコンパイル::   設定ファイルの自動バイトコンパイル。
* picture-modeとの併用::        picture-mode との併用の際の問題点。
* サーバ関連::



File: skk.info, Node: ファイル構成, Next: ユーザーオプションの設定方法, Prev: 便利な応用機能, Up: 便利な応用機能

ファイル構成
============

 DDSKK 13 では、応用機能を提供するプログラムのほとんどを `skk.el' とは
別のファイルに収めています。これらは、必要に応じオートロードするように
設計されています。各応用機能の概略と該当のファイル名について説明します。

`context-skk.el'

     編集の文脈に応じて自動的にskkのモードを切り替えたり、SKK の各種設
     定を変更する機能を提供します。

`skk-abbrev.el'

     SKK abbrev mode の機能を提供するプログラムを集めたファイル。

     *Note SKK abbrev mode: アスキー文字を見出し語とした変換.

`skk-act.el'

     dvorak 配列での拡張ローマ字入力 "ACT" を SKK で使うための設定を提
     供します。

     `http://www1.vecceed.ne.jp/~bemu/act/act_index.html'

`skk-annotation.el'

     個人辞書に付けたアノテーション (註釈) を活用するプログラムを集めた
     ファイル。

`skk-auto.el'

     送り仮名の自動処理を行うプログラムを集めたファイル。

     *Note 送り仮名の自動処理::.

`skk-autoloads.el'

     オートロードの設定を記述したファイル。XEmacs で DDSKK をパッケージ
     としてインストールした場合は `auto-autoloads.el' というファイルが
     これに相当します。

`skk-azik.el'

     拡張ローマ字入力 "AZIK" の設定を提供します。

     `http://hp.vector.co.jp/authors/VA002116/azik/azikindx.htm'

`skk-bayesian.el'

     SKK の学習機能のひとつで、ユーザの過去の入力から変換候補を予測しま
     す。

     `http://kenichi.kurihara.googlepages.com/bskk.html'

`skk-comp.el'

     見出し語の補完を行うプログラムを集めたファイル。

     *Note 見出し語の補完::.

`skk-cursor.el'

     カーソルの色を制御するプログラムを集めたファイル。

`skk-dcomp.el'

     skk-comp による補完を自動的に実行して見出し語入力を支援します。

`skk-develop.el'

     バグレポートのメールバッファを用意するプログラムファイル。

`skk-dic.el'

     SKK 辞書を Emacs Lisp プログラムとして用意できます。

`skk-e21.el'

     GNU Emacs 21 以降の拡張機能を利用するプログラムを集めたファイル。
     インジケータのカラー化や画像表示、ツールティップ利用など。

`skk-gadget.el'

     プログラム実行変換を行うプログラムを集めたファイル。

     *Note プログラム実行変換::.

`skk-hint.el'

     SKK の変換候補が多いときにヒントを与えて絞りこむ機能を提供します。

`skk-isearch.el'

     DDSKK を併用したインクリメンタル・サーチ機能を提供します。

     *Note I-search関連::.

`skk-jisx0201.el'

     いわゆる半角カナを利用する機能を提供します。

`skk-jisx0213.el'

     JISX0213 文字コードを扱うプログラムです。

`skk-jisyo-edit-mode.el'

     SKK 辞書を編集するためのメジャーモードを提供します。

`skk-kakasi.el'

     KAKASI インターフェイスプログラムを集めたファイル。

     *Note 領域一括変換::.

`skk-kanagaki.el'

     キーボードのかな配列などに対応する枠組みを提供します。現段階では旧
     JIS 配列のかなキーボード、および NICOLA 規格の親指シフト配列に対応
     しています。

     `http://nicola.sunicom.co.jp/'

`skk-kcode.el'

     漢字コードまたはメニューによる文字入力を行うプログラムを集めたファ
     イル。

     *Note 漢字コードまたはメニューによる文字入力::.

`skk-leim.el'

     LEIM 関連プログラムファイル。DDSKK を Emacs の input method として
     利用できるようにします。

`skk-look.el'

     look インターフェイスプログラムを集めたファイル。
     *Note skk-look::.

`skk-lookup.el'

     Lookup で検索できる辞書を使って単語の候補を出力するプログラム。

     *Note skk-lookup::.

`skk-macs.el'

     他のファイルで共通して使用するマクロなどを中心にまとめたファイル。

`skk-num.el'

     数値変換を行うプログラムを集めたファイル。

     *Note 数値変換::.

`skk-obsolete.el'

     `~/.emacs' や `~/.skk' などのユーザー設定ファイル中の古い設定 (変
     数、関数名など)の修正支援プログラム。

`skk-server-completion.el'

     拡張された SKK 辞書サーバによる見出し語補完機能を利用できます。

`skk-server.el'

     SKK 辞書サーバと通信して変換する機能を提供します。

     *Note サーバ関連::.

`skk-setup.el'

     自動的に個人設定を行うためのファイル。

`skk-study.el'

     直前に確定したいくつかの語との関連性を確認し、候補順を操作する学習
     効果を提供するプログラム。

     *Note 変換の学習::.

`skk-tankan.el'

     SKK を使って単漢字変換を行うプログラムです。

`skk-tut.el'

     SKK チュートリアルプログラム。

`skk-tutcode.el'

     SKK で TUT-code 入力を実現します。

`skk-vars.el'

     DDSKK の変数を集約したファイル。カスタマイズしたい場合にこのファイ
     ルを見ると参考になるかもしれません。

`skk-version.el'

     DDSKK のバージョン情報を提供するプログラムファイル。

`skk-viper.el'

     VIPER インターフェイスプログラムを集めたファイル。

`skk-xemacs.el'

     XEmacs の拡張機能を利用するプログラムを集めたファイル。インジケー
     タのカラー化や画像表示、ツールティップ利用など。

 なお、Elibより `queue-m.el' ファイルを収録しています。



File: skk.info, Node: ユーザーオプションの設定方法, Next: 入力モードの一時変更, Prev: ファイル構成, Up: 便利な応用機能

ユーザーオプションの設定方法
============================

 DDSKK のカスタマイズは、`~/.emacs' あるいは `~/.skk' に記述します。ま
た、各ファイルの提供するフックも利用します。上記のファイルやフックを利
用した設定がいつ有効になるのか、という点についてここで説明します (1) 。

`~/.emacs'

     Emacs を起動したときに一度だけ読みこまれます。

     *Note .emacs: (emacs)Init File.

`~/.skk'

     DDSKK を起動した最初の一度だけ読みこまれます。ファイル名の既定値は、
     OS の種類により異なりますが、実際は Emacs の関数
     `convert-standard-filename' により加工されます。`~/.skk' のファイ
     ル名は変数 `skk-init-file' で変更することができます。また、DDSKK
     にはこのファイルを自動的にバイトコンパイルする機能があります。詳細
     は、

          *Note skk-init-fileのコンパイル::.

     を参照してください。

`skk-mode-hook'

     `C-x C-j' と入力して SKK モードに入る度に呼ばれます。主にバッファ
     ローカルの設定などを行います。

`skk-auto-fill-mode-hook'

     `C-x j' と入力してオートフィルモード付きで SKK モードに入る度に呼
     ばれます。主にバッファローカルの設定などを行います。

`skk-load-hook'

     `skk.el' の読みこみを完了した時点で呼ばれます。`~/.skk' は SKK
     モードを起動しなければ読みこまれないのに対し、このフックは、
     `skk.el' を読みこんだら SKK モードを起動しなくとも呼ばれます。

`skk-auto-load-hook'
`skk-comp-load-hook'
`skk-gadget-load-hook'
`skk-kakasi-load-hook'
`skk-kcode-load-hook'
`skk-num-load-hook'
`skk-server-load-hook'

     `skk-auto.el', `skk-comp.el', `skk-gadget.el', `skk-kakasi.el',
     `skk-kcode.el', `skk-num.el', `skk-server.el' の各ファイルの読みこ
     みが完了した直後に呼ばれるフック。

 `load-hook' が提供されていないプログラムであっても、ロード後に何らかの
設定を行いたい場合は、関数 `eval-after-load' を使用します。例えば、

     (eval-after-load "skk-look"
       '(
         ...
         ))

のように記述します。

--------- Footnotes ---------

(1)  以前のバージョンでは、どのようなカスタマイズが行われている場合
でもチュートリアル使用時に標準設定に戻す目的で、変数の宣言に
`defconst' を使用していたので、全てのカスタマイズは `~/.skk'
で行う必要がありましたが、DDSKK 11 以降では、`defcustom' を使用した
宣言を行っているので、この制限はなくなりました。



File: skk.info, Node: 入力モードの一時変更, Next: ■モードにおける文字入力, Prev: ユーザーオプションの設定方法, Up: 便利な応用機能

入力モードの一時変更
====================

DDSKK には、カタカナの入力にはカナモードを、全角アルファベットの入力には
全英モードを用いる (1)
普通のやり方のほかに、一時的にカナ文字、全英文字を入力して、また、かなモー
ドに戻る方法があります。

 また、アスキー文字を見出し語として使用するために、かなモードから一時的
にアスキー文字を入力する機能が提供されています。それは▽モードの変種で
あり、 "SKK abbrev mode" と呼ばれています。この機能を使用することにより、

`is'=>`インクリメンタル・サーチ'

 のような変換を行うことができます。

 ここではこれらの方法について説明します。

* Menu:

* ひらがな/カタカナの一時的入力::
* 全英文字の一時的入力::

--------- Footnotes ---------

(1)  *Note カナモード、全英モード: 入力モード.



File: skk.info, Node: ひらがな/カタカナの一時的入力, Next: 全英文字の一時的入力, Prev: 入力モードの一時変更, Up: 入力モードの一時変更

ひらがな/カタカナの一時的入力
-----------------------------

 まず、かなモードもしくはカナモードに入ります。`Q' キーで一旦▽モードに
して (1) 何か文字列を入力し、その文字列の末尾で `q' をタイプすると、`▽'
マークから `q' を入力した位置までの文字列が、変換され確定されます。変換
は、`▽' とポイント間の文字列の種類 (2) をキーとして、以下の規則に基づ
いて行われます。

   * カタカナはひらがなへ
   * ひらがなはカタカナへ
   * 全英文字はアスキー文字へ
   * アスキー文字は全英文字へ

 このような変換を、トグル変換と呼びます。以下はトグル変換の例です。

     K a t a k a n a

     ------ Buffer: foo ------
     ▽かたかな-!-
     ------ Buffer: foo ------

     q

     ------ Buffer: foo ------
     カタカナ-!-
     ------ Buffer: foo ------

 このトグル変換を上手く利用することにより、かなモードのまま一時的にカタ
カナを入力したり、またその逆を行うことができます。こうすると、例えばひ
らがな/カタカナ混じり文を書くときに、その都度 `q' キーを押して入力モー
ドを切り換える必要がありません。 (3)

トグル変換は、領域を対象としたコマンドによって行うこともできます。
*Note 領域一括変換::.

--------- Footnotes ---------

(1)  `/'キーで SKK abbrev mode に入ってしまうと
`q' キー入力が `q' 文字の入力として扱われるのでこの場合は使いま
せん。

(2) 正確には `▽' の次の位置にある文字列によって文字種の判別を行っ
ているので、途中で文字種類の違う文字が混在していても無視されます。

(3) 全英文字とアスキー文字のトグルでの変換を行うこともできます。ただし、
全英モードやアスキーモードでは `Q' やその他の大文字により▽モードに
入ることができないので、かな ⇔ カナ のときと同様にトグル変換できるわけ
ではありません。かなモード/カナモードにおいて、既に入力された全英文字、
アスキー文字に対してトグル変換をするような設計になっています。



File: skk.info, Node: 全英文字の一時的入力, Prev: ひらがな/カタカナの一時的入力, Up: 入力モードの一時変更

全英文字の一時的入力
--------------------

 まず、かなモードに入ります。次に、`/' を入力すると、SKK abbrev モード
に入ります。続いて、全角アルファベットとして入力したい文字列を挿入し、
その文字列の末尾で `C-q' (1) を入力することで、`▽'マークから `C-q' を
入力した位置までの文字列が全角アルファベットに変換され確定されます。

     / f i l e

     ------ Buffer: foo ------
     ▽file-!-
     ------ Buffer: foo ------

     C-q

     ------ Buffer: foo ------
     ｆｉｌｅ-!-
     ------ Buffer: foo ------

 なお、この変換を行うために、

     file /ｆｉｌｅ/

のような辞書エントリを持つ必要はありません。なぜなら、辞書を参照せず、
アスキー文字を 1 文字づつ全英文字に変換しているからです。

--------- Footnotes ---------

(1)  `C-q' は
`skk-abbrev-mode-map' にて特別な動作をするように定義されています。
*Note アスキー文字を見出し語とした変換::.



File: skk.info, Node: ■モードにおける文字入力, Next: ポイントを戻して▽モードへ, Prev: 入力モードの一時変更, Up: 便利な応用機能

■モードにおける文字入力
========================

* Menu:

* かなモード/カナモードにおける入力::
* 全英モードにおける入力::
* 1回の取り消し操作(undo)の対象::
* 対になる文字列の一括入力::



File: skk.info, Node: かなモード/カナモードにおける入力, Next: 全英モードにおける入力, Prev: ■モードにおける文字入力, Up: ■モードにおける文字入力

かなモード/カナモードにおける入力
---------------------------------

* Menu:

* ■モードにおける文字変換::
* skk-rom-kana-base-rule-listの具体例::
* skk-rom-kana-rule-listの利用例::
* ■モードに関連するその他の変数::
* 数字や記号文字の入力::



File: skk.info, Node: ■モードにおける文字変換, Next: skk-rom-kana-base-rule-listの具体例, Prev: かなモード/カナモードにおける入力, Up: かなモード/カナモードにおける入力

■モードにおける文字変換
........................

`skk-rom-kana-base-rule-list'
`skk-rom-kana-rule-list'

 DDSKK の■モードにおける文字変換は、上記 2 変数を用いて行われます。

 これらは、1 種の規則であり、「入出力の状態がいかに移り変わるべきか」を
決定します。その内容は、

     (入力される文字列 出力後に自動的に入力に追加される文字列 出力)

という形のリストを列挙したものです。

`入力される文字列' とは変換される前の ASCII 文字の文字列をいいます。

`出力' は次の入力状態に移るときにバッファに挿入される文字列の組み合
わせであり、 ("ア" . "あ") のようなコンスセルです。

 2 変数のうち、`skk-rom-kana-rule-list' は使用者が独自の規則を定義する
ために用意されていて、`skk-rom-kana-base-rule-list' の規則より優先され
ます。



File: skk.info, Node: skk-rom-kana-base-rule-listの具体例, Next: skk-rom-kana-rule-listの利用例, Prev: ■モードにおける文字変換, Up: かなモード/カナモードにおける入力

skk-rom-kana-base-rule-listの具体例
...................................

`skk-rom-kana-base-rule-list' には

     ("a" nil ("ア" . "あ"))
     ("ki" nil ("キ" . "き"))
     ("tt" "t" ("ッ" . "っ"))
     ("nn" nil ("ン" . "ん"))
     ("n'" nil ("ン" . "ん"))

のような規則があります。これによると

     a ==>あ
     ki ==>き
     tt ==>っt
     nn ==>ん
     n' ==>ん

のようになります。



File: skk.info, Node: skk-rom-kana-rule-listの利用例, Next: ■モードに関連するその他の変数, Prev: skk-rom-kana-base-rule-listの具体例, Up: かなモード/カナモードにおける入力

skk-rom-kana-rule-listの利用例
..............................

`skk-rom-kana-base-rule-list' の規則に従うと

     hannou ==>はんおう
     han'ou ==>はんおう
     hannnou ==>はんのう

のようになります。ここで

     (setq skk-rom-kana-rule-list
           (append skk-rom-kana-rule-list
                   '(("nn" "n" ("ン" . "ん")))))

のような設定にすることで

     hannou ==>はんのう

のようにローマ字かな変換が行われるようになります。

 もうひとつ利用例を挙げます。

     tp ==>東北大学
     skk ==>skk
     skK ==>SKK

といった変換は、

     ("tp" nil ("東北大学" . "東北大学"))
     ("sk" nil ("" . ""))
     ("skk" nil ("skk" . "skk"))
     ("skK" nil ("SKK" . "SKK"))

のような規則を追加することで実現されます。自分の名前を入力することはよ
くあるので、適当な省略形を用いて、このリストに追加しておく、といった利
用をお勧めします。

 更に `skk-rom-kana-rule-list' を用いれば T-code や TUT-code による日本
語入力を実現することもできます。例えば TUT-code による入力についてはソー
スアーカイブの `experimental/tut-code' ディレクトリに収録されているソー
スコードを参照してください。



File: skk.info, Node: ■モードに関連するその他の変数, Next: 数字や記号文字の入力, Prev: skk-rom-kana-rule-listの利用例, Up: かなモード/カナモードにおける入力

■モードに関連するその他の変数
..............................

`skk-kana-input-search-function'

     ルールリストの中に記せない変換ルールを処理する関数。これは

          ohs ==>おおs

     のような変換を実現するために用意されています。これにより

          ohsaka ==>おおさか
          ohta ==>おおた

     のように変換されますが、一方

          ohhonn ==>おっほん
          ohhira ==>おっひら

     となる場合もあります。これは `skk-rom-kana-rule-list' の既定値に

          ("hh" "h" ("ッ" . "っ"))

     が入っているためです。これを削除すれば

          ohhonn ==>おおほん
          ohhira ==>おおひら

     となります。



File: skk.info, Node: 数字や記号文字の入力, Prev: ■モードに関連するその他の変数, Up: かなモード/カナモードにおける入力

数字や記号文字の入力
....................

 かなモード/カナモードにおける次のキーは、かつては `skk-self-insert' 関
数にバインドされていました。現在は他のキーと同様に `skk-insert' 関数に
バインドされています。

     !  #  %  &  '  *  +

     -  0  1  2  3  4  5

     6  7  8  9  :  ;  <

     =  >  ?  "  (  )  [

     ]  {  }  ^  _  `  |

     ~

これらの数字や記号文字のキーに対応し挿入される文字は、変数
`skk-input-vector' の値により決定されていましたが、DDSKK 10 にてこ
の変数は廃止されました。カスタマイズするためには、代わりに変数
`skk-rom-kana-rule-list' を利用します。例えば、SKK 9.6 以前において、

     (aset skk-input-vector ?! nil)
     (aset skk-input-vector ?, nil)
     (aset skk-input-vector ?. nil)
     (aset skk-input-vector ?: nil)
     (aset skk-input-vector ?; nil)
     (aset skk-input-vector ?? nil)

このような設定をしていた場合、DDSKK 10.x 以降で同様の入力をするためには、

     (setq skk-rom-kana-rule-list
           (append skk-rom-kana-rule-list
                   '(("!" nil "!")
                     ("," nil ",")
                     ("." nil ".")
                     (":" nil ":")
                     (";" nil ";")
                     ("?" nil "?"))))

のような設定に変更する必要があります。

 `skk-insert' は、Emacs のオリジナル関数 `self-insert-command' をエミュ
レートしています。具体的には、引数を渡すことによって同じ文字を複数、一
度に挿入することが可能です (1) 。


     C-u 2 !

     ------ Buffer: foo ------
     ！！
     ------ Buffer: foo ------

--------- Footnotes ---------

(1)  かつては、`▽あ'などを入力する場合には引数渡しができなかっ
たのですが、本バージョンではこれもできるように拡張されています。



File: skk.info, Node: 全英モードにおける入力, Next: 1回の取り消し操作(undo)の対象, Prev: かなモード/カナモードにおける入力, Up: ■モードにおける文字入力

全英モードにおける入力
----------------------

全英モードにおける印字可能な全てのキーはコマンド
`skk-jisx0208-latin-insert' に割り付けられています。また、変数
`skk-jisx0208-latin-vector' の値により挿入される文字が決定されます。
`skk-jisx0208-latin-vector' の既定値は以下のようになっています。

     [nil  nil  nil  nil  nil  nil  nil  nil
      nil  nil  nil  nil  nil  nil  nil  nil
      nil  nil  nil  nil  nil  nil  nil  nil
      nil  nil  nil  nil  nil  nil  nil  nil
      "　"  "！" "”" "＃" "＄" "％" "＆" "’"
      "（" "）" "＊" "＋" "，" "−" "．" "／"
      "０" "１" "２" "３" "４" "５" "６" "７"
      "８" "９" "：" "；" "＜" "＝" "＞" "？"
      "＠" "Ａ" "Ｂ" "Ｃ" "Ｄ" "Ｅ" "Ｆ" "Ｇ"
      "Ｈ" "Ｉ" "Ｊ" "Ｋ" "Ｌ" "Ｍ" "Ｎ" "Ｏ"
      "Ｐ" "Ｑ" "Ｒ" "Ｓ" "Ｔ" "Ｕ" "Ｖ" "Ｗ"
      "Ｘ" "Ｙ" "Ｚ" "［" "＼" "］" "＾" "＿"
      "‘" "ａ" "ｂ" "ｃ" "ｄ" "ｅ" "ｆ" "ｇ"
      "ｈ" "ｉ" "ｊ" "ｋ" "ｌ" "ｍ" "ｎ" "ｏ"
      "ｐ" "ｑ" "ｒ" "ｓ" "ｔ" "ｕ" "ｖ" "ｗ"
      "ｘ" "ｙ" "ｚ" "｛" "｜" "｝" "〜" nil]

挿入される文字の変更方法を知りたい場合は、*Note 数字や記号文字の入力::
を参照してください。

`skk-jisx0208-latin-insert' も Emacs オリジナルの関数
`self-insert-command' をエミュレートしています。つまり、引数を渡す
ことにより同じ文字を複数、一度に挿入することができます。
`skk-insert'における動作と同じですから、
*Note 数字や記号文字の入力:: における例を参考にしてください。



File: skk.info, Node: 1回の取り消し操作(undo)の対象, Next: 対になる文字列の一括入力, Prev: 全英モードにおける入力, Up: ■モードにおける文字入力

1回の取り消し操作(undo)の対象
-----------------------------

 Emacs では本来、連続する 20 文字の挿入が一回の取り消し操作 (アンドゥ)
の対象となっています。そこで DDSKK のかな・カナ・全英モードにおける入力
も、これと同様の動作をするように設計されています (1) 。正確に言えば、
`skk-insert', `skk-set-henkan-point', `skk-jisx0208-latin-insert' (2)
の各関数にバインドされたキー入力については、連続して入力された 20 文字
を 1 つのアンドゥの対象としています (3) 。

 ただし、これらの DDSKK のコマンドと Emacs 本来の`self-insert-command'
を織り混ぜてキー入力した場合 (4) は、このエミュレーションは正常に動作し
ませんが、これは現在の仕様です。

     a i u e o k a k i k u k e k o s a s i s u s e s o t a t i t u t e t o

     ------------------------- Buffer: foo -------------------------
     あいうえおかきくけこさしすせそたちつてと ;連続する20文字。
     ------------------------- Buffer: foo -------------------------

     C-_

     ------------------------- Buffer: foo -------------------------
                            ;20文字全てがアンドゥの対象となる。
     ------------------------- Buffer: foo -------------------------

     a i u e o k a k i k u k e k o s a s i s u s e s o t a t i t u t e t o n a

     -------------------------- Buffer: foo --------------------------
     あいうえおかきくけこさしすせそたちつてとな ;連続する21文字。
     -------------------------- Buffer: foo --------------------------

     C-_

     -------------------------- Buffer: foo --------------------------
     あいうえおかきくけこさしすせそたちつてと ;最後の1文字のみがアンドゥの対象となる。
     -------------------------- Buffer: foo --------------------------

--------- Footnotes ---------

(1)  `buffer-undo-list' に Emacs が挿入したアンドゥの境目の目
印を取り除く方法でエミュレートしています。

(2) SKK abbrev モードでは、アスキー文字入力が Emacs 本来の
`self-insert-command' により行われているので、エミュレーションのた
めの内部変数である `skk-self-insert-non-undo-count' をインクリメン
トすることができず、アンドゥをエミュレートできません。しかも、カンマや
ピリオドを挿入した時点で、コマンド `skk-abbrev-comma' や
`skk-abbrev-period' を使うことになるので、本来のアンドゥの機能も損
なってしまいます。ただし、現実問題として、元来 SKK abbrev モードは省略
形としての見出し語を挿入するためのモードですから、長い見出し語を挿入す
ることはあまりないと考えられます。

(3) `20' は Emacs のソースファイルの一部である `keyboard.c' に定め
られたマジックナンバーと一致します。

(4) かなモードでの入力中、アスキーモードに移行して入力した場合などがこ
れにあたります。



File: skk.info, Node: 対になる文字列の一括入力, Prev: 1回の取り消し操作(undo)の対象, Up: ■モードにおける文字入力

対になる文字列の一括入力
------------------------

 ふつう、`「' を入力したら、`」' を後で入力する必要があります。`「' の
入力時点で、対になる文字を自動挿入してくれると打鍵数を減らすことができ
ますし、同時に入力忘れの防止にもなるでしょう。

 そのために変数 `skk-auto-insert-paren' が用意されています。この値を非
`nil' にすると、上記の自動挿入を行います、

     ------ Buffer: foo ------
     彼はこう言った-!-
     ------ Buffer: foo ------

     [

     ------ Buffer: foo ------
     彼はこう言った「-!-」
     ------ Buffer: foo ------

上記のように `「' の入力時点で対となる`」'を自動挿入し、`「'と`」'の間
にポイントを再配置するので、その位置からかぎかっこに囲まれた文字列を即
始めることができます。

 自動挿入すべきペアの文字列は、変数 `skk-auto-paren-string-alist' で指
定します。既定値は下記のようになっています。

     (("「" . "」") ("『" . "』") ("(" . ")") ("（" . "）") ("{" . "}")
      ("｛" . "｝") ("〈" . "〉") ("《" . "》") ("[" . "]") ("［" . "］")
      ("〔" . "〕") ("【" . "】") ("\"" . "\"") ("“" . "”") ("`" . "'"))

これは、ひと言でまとめると、「開き括弧と閉じ括弧とのコンスセルを集めたリ
スト」です。各コンスセルの `car' にある文字列を挿入したときに、
`cdr' にある文字列が自動挿入されます。 (1) (2)

 キーとなる文字の挿入が行われても、その挿入後のポイントに自動挿入すべき
文字が既に存在している場合には、自動挿入は行われないように設計されてい
ます。

     ------ Buffer: foo ------
     -!-」
     ------ Buffer: foo ------

     [

     ------ Buffer: foo ------
     「-!-」
     ------ Buffer: foo ------


 対になる文字を複数挿入したい場合は、引数を渡して文字を指定します。


     C-u 2 [

     ------ Buffer: foo ------
     「「-!-」」
     ------ Buffer: foo ------

 `yatex-mode' など、既に同種の機能が付いているモードがあります。そのよ
うなモードにおいてもこの自動挿入の機能が邪魔になることはないでしょうが、
そのモードにおいてのみこの機能をオフにしたい場合は、該当のモードに入っ
たときにコールされるフック変数を利用して設定を行うことができます。

     (add-hook 'yatex-mode-hook
               #'(lambda ()
                   (when skk-auto-insert-paren
                     (make-local-variable 'skk-auto-insert-paren)
                     (setq skk-auto-insert-paren nil))))

 特定のモードにおいて、自動挿入すべき文字を変更したい場合にも同様にフッ
ク変数を用いて操作できます。

     (add-hook 'tex-mode-hook
               #'(lambda ()
                   (when skk-auto-insert-paren
                     (make-local-variable 'skk-auto-paren-string-alist)
                     (setq skk-auto-paren-string-alist
                           (cons '("$" . "$") skk-auto-paren-string-alist)))))

同様に、特定のペアを削除したい場合は、例えば下記のように設定します。

     (add-hook 'tex-mode-hook
               #'(lambda ()
                   (when skk-auto-insert-paren
                     (make-local-variable 'skk-auto-paren-string-alist)
                     (setq skk-auto-paren-string-alist
                           (delete
                            '("$" . "$")
                            (copy-sequence skk-auto-paren-string-alist))))))

--------- Footnotes ---------

 (1) このリストの各要素の `car' の文字列は、必ず変数
`skk-rom-kana-rule-list' の規則によって入力されなければなりません。例え
ば、`(' に対する `)' の自動挿入をするには

     (setq skk-rom-kana-rule-list
           (append skk-rom-kana-rule-list
                   '(("(" nil "("))))))

のような設定をする必要があります。

(2) 既に SKK モードになっているバッファで変数
`skk-auto-paren-string-alist' を変更した場合は、`C-x C-j' もし
くは `C-x j' を 2 度タイプして `skk-mode' もしくは
`skk-auto-fill-mode' を起動し直す必要があります。



File: skk.info, Node: ポイントを戻して▽モードへ, Next: 確定変換とその取り消し, Prev: ■モードにおける文字入力, Up: 便利な応用機能

ポイントを戻して▽モードへ
==========================

 ▽モードに入り忘れた場合の▽マークの付け方については、前述しました
(1) 。ここでは、これを簡略化し、一回の操作で行う方法について説明します。

 `M-Q' (2) とタイプすると現在位置の直前の文字列について走査し、同種の文
字 (3) が続く限り 後方にポイントを戻して▽モードに入り、またポイントを
元の地点に戻します。 (4)

     k a n j i

     ------ Buffer: foo ------
     かんじ-!-
     ------ Buffer: foo ------

     M-Q

     ------ Buffer: foo ------
     ▽かんじ-!-
     ------ Buffer: foo ------

 変換開始位置を決定するとき、スペース文字、タブ文字、長音を表わす `ー'
は無条件に無視されます。ただし、ひらがなの場合は `を' が、カタカナの場
合は`ヲ'が見つかった時点で変換開始位置の走査を止め、▽モードに入ります。
変換開始ポイントを`を'、`ヲ'の直前で止めるのは、たいていその直後から単
語が始まるからです。

 以上は `M-Q' を引数を与えないで実行した場合です。一方で、`C-u 5 M-Q'
のように引数を渡して実行すると、変換開始位置から現在位置までの文字数を
指定することができます。この場合は文字種別を問わず、与えられた文字数だ
け無条件にポイントを戻します。

--------- Footnotes ---------

(1)  *Note ▽マークの付け忘れ: ▽モード.

(2) ここで `Q' は大文字で入力する必要があります。

(3) ひらがな、カタカナ、全角アルファベット、アルファベットの 4 種類のい
ずれか。

(4) 後方にポイントを戻す途中で行頭に到達した場合は、更に上の行について、
行末の文字列から同様の走査を行い、必要があれば更にポイントを戻します。
こうした「行を超えての走査」をやめるためには、変数
`skk-allow-spaces-newlines-and-tabs' の値を `nil' に設定しま
す。



File: skk.info, Node: 確定変換とその取り消し, Next: 確定アンドゥ, Prev: ポイントを戻して▽モードへ, Up: 便利な応用機能

確定変換とその取り消し
======================

 確定変換を行う関数 `skk-search-kakutei-jisyo-file'と 確定辞書を指定す
るための変数 `skk-kakutei-jisyo' については先に説明しました (1) 。ここ
ではその動作についてより詳しく説明します。

 例えば、

     せつめい /説明/

というエントリが確定辞書にあったとします。このとき、

     S e t u m e i

     ------ Buffer: foo ------
     ▽せつめい
     ------ Buffer: foo ------

     SPC

     ------ Buffer: foo ------
     説明
     ------ Buffer: foo ------

のように確定動作をすることなしに(暗黙の確定もなく) いきなり確定します。
仮に確定辞書に

     じしょ /辞書/

というエントリを挿入してしまったが、`自署'に変換したい場合は、確定直後
に `x' をタイプすることにより確定変換を取り消して▽モードに戻ることがで
きます。この場合は、次に SPC をタイプしたときは、確定辞書の検索を行わな
いません。そのため個人辞書、あるいは共有辞書に

     じしょ /自署/

のエントリがあれば `自署' への変換を行うことができます。

     Z i s y o SPC

     ------ Buffer: foo ------
     辞書
     ------ Buffer: foo ------

     x

     ------ Buffer: foo ------
     ▽じしょ
     ------ Buffer: foo ------

     SPC

     ------ Buffer: foo ------
     ▼自署
     ------ Buffer: foo ------


--------- Footnotes ---------

(1)  *Note 辞書検索のための関数::



File: skk.info, Node: 確定アンドゥ, Next: 見出し語関連, Prev: 確定変換とその取り消し, Up: 便利な応用機能

確定アンドゥ
============

 一番最後に行った変換についての確定を取り消して、再変換を行うことができ
ます。これを「確定アンドゥ」と呼びます。これは確定変換の取り消しとは異
なる概念です。

 例えば、辞書エントリが

     こうこう /高校/孝行/航行/

のようになっているとします。

     K o u k o u SPC

     ------ Buffer: foo ------
     ▼高校
     ------ Buffer: foo ------

     s u r u

     ------ Buffer: foo ------
     高校する-!-
     ------ Buffer: foo ------

     M-x skk-undo-kakutei

     ------ Buffer: foo ------
     ▼孝行-!-する
     ------ Buffer: foo ------

この例では、`高校' の確定について取り消しています。すると、辞書の第一候
補である `高校' をとばして、次候補である `孝行' が現れます。ここで更に
SPC を押せば次候補である `航行' が現れ、更にもう一度 SPC を押せば辞書登
録モードに入ります。

 この例に見られるように、確定アンドゥは、確定した直後でなくとも有効です。
より正確には、次の新たな確定 (1) を行うまでは確定に関する情報が保持され
ているので、確定アンドゥすることができます。

 また、変換、確定に関連しない文字列は、確定アンドゥを行っても削除されな
いように設計されています。上記の例では、`する' がそのままカレントバッファ
に残っています。

--------- Footnotes ---------

(1)  `C-j' をタイプして明示的に確定した場合は勿論、暗黙の確定を
行った場合も同様です。



File: skk.info, Node: 見出し語関連, Next: 送り仮名関連, Prev: 確定アンドゥ, Up: 便利な応用機能

見出し語関連
============

* Menu:

* 見出し語の補完::
* 見出し語を補完しながら▼モードへ::
* 空白・改行・タブを含んだ見出し語の変換::
* カタカナの見出し語::



File: skk.info, Node: 見出し語の補完, Next: 見出し語を補完しながら▼モードへ, Prev: 見出し語関連, Up: 見出し語関連

見出し語の補完
--------------

 ▽モードで TAB を押すと、見出し語 (▽モードにおける入力文字列) に対す
る補完が行われます。今、TABを押す直前に▽モードで入力された文字列をσと
呼ぶことにします。このとき、個人辞書 (1) の送りなしエントリの中で、先頭
がσと一致し長さがσよりも長い見出し語を捜して、そのような語がもしあれ
ば、σの代わりにその語が表示されます。

 見出し語の補完を上手に利用すると、打鍵数を減らすことができます。

 個人辞書では最近更新されたエントリほど上位に来るようになっています
(2) 。したがって、▼モードで変換を行った語の見出し語について、時間的に
新しいものから先に補完が行われます。例えば、`斉藤'、`佐藤' の順で変換し
た後、`さ' をキーにして見出し語の補完を行うと、最初に `さとう' が、その
次に`さいとう' が補完されます。補完が意図したものでなかったときにはTAB
の直後に `.' (ピリオド) をタイプすると 2 番目の見出し語が表示されます。
以降、同様に `.' を続けてタイプすると、見出し語の候補が順次表示されます。
意図した見出し語を通りすぎたときは `,' (コンマ) で前の候補に戻ります。

     S a t o u SPC C-j

     ------ Buffer: foo ------
     佐藤
     ------ Buffer: foo ------

     S a

     ------ Buffer: foo ------
     ▽さ
     ------ Buffer: foo ------

     TAB

     ------ Buffer: foo ------
     ▽さとう
     ------ Buffer: foo ------

     `.'


     `さとう' の次に補完される見出し語は、個人辞書の内容に依存します。

     ------ Buffer: foo ------
     ▽さいとう
     ------ Buffer: foo ------

     `,'

     ------ Buffer: foo ------
     ▽さとう
     ------ Buffer: foo ------

     SPC

     ------ Buffer: foo ------
     ▼佐藤
     ------ Buffer: foo ------

     C-j

     ------ Buffer: foo ------
     佐藤
     ------ Buffer: foo ------

なお、個人辞書の検索は、見出し語を得るために行われるので、一旦
SPC を入力して▼モードに入れば普通の変換動作に入ります。

 また、2回目以降の補完のときに、`.' の代わりに C-u TAB を入力すると、見
出し語補完の動作が変化します。具体的には、最初の補完キーを捨てて最後に
補完された語を補完キーとし、新しい補完を開始します。つまり上記の例では
`さ' に対し、最後に補完された語は、`さとう' なので、以後の補完は、`さと
う' を含む語 (例えば、`さとうせんせい'など) について行われます。


--------- Footnotes ---------

(1)  共有辞書は検索されません。それは、共有辞書では一般的に先頭の文
字を共通にする見出し語が多すぎて、望みの補完が行える確率が低いからです。

(2) *Note 辞書ファイルを指定する変数::



File: skk.info, Node: 見出し語を補完しながら▼モードへ, Next: 空白・改行・タブを含んだ見出し語の変換, Prev: 見出し語の補完, Up: 見出し語関連

見出し語を補完しながら▼モードへ
--------------------------------

 前節で見出し語の補完について述べました。本節では、見出し語の補完動作を
行った後、SPC を入力し、▼モードに入るまでの動作を一回の操作で行う方法
について説明します。

やり方は簡単。TAB・SPCと打鍵していたところを、
`M-SPC' に換えると、補完した上で変換を開始します。

 この方法によると、補完される見出し語があらかじめ分かっている状況では、
キー入力を一回分省略できるので、長い見出し語の専門用語を連続して入力す
る場合などに威力を発揮します。

     K a s i t a n n p o s e k i n i n n

     ------ Buffer: foo ------
     ▽かしたんぽせきにん
     ------ Buffer: foo ------

     SPC, RET

     ------ Buffer: foo ------
     瑕疵担保責任
     ------ Buffer: foo ------

     K a

     ------ Buffer: foo ------
     ▽か
     ------ Buffer: foo ------

     M-SPC

     ------ Buffer: foo ------
     ▼瑕疵担保責任
     ------ Buffer: foo ------




