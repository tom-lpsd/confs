Info file: skk.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `skk.texi'
using `texinfmt.el' version 2.42 of  7 Jul 2006.

INFO-DIR-SECTION Emacs
INFO-DIR-SECTION GNU Emacs Lisp
START-INFO-DIR-ENTRY
* SKK: (skk).           Simple Kana to Kanji conversion program.
END-INFO-DIR-ENTRY



 Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

 Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

 Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the author.


File: skk.info, Node: 辞書バッファの文字コードの設定, Next: 辞書バッファのメジャーモード, Prev: 辞書候補数の数えあげ, Up: 辞書関連

辞書バッファの文字コードの設定
------------------------------

`skk-jisyo-code'

     この変数の値は辞書ファイルの漢字コードを決定します。

     この変数は以下のような値を取ります (1) 。

        * "euc", "ujis", "sjis", "jis" などの文字列
        * Emacs によって coding system と認められるシンボル
        * Emacs によって coding system を示すのに使われるシンボル
        * nil

     既定値は `nil' です。この場合、DDSKK 側で辞書の漢字コードを設定す
     ることはせず、Emacs に任せます。

--------- Footnotes ---------

(1)  Mule 2.3 では `*euc-japan*', `*sjis*',
`*junet*' などのシンボルを指定することができます。
Emacs 20 では、`euc-jp', `shift_jis', `junet' などのシン
ボルを指定することができます。



File: skk.info, Node: 辞書バッファのメジャーモード, Next: 辞書バッファのbuffer-file-name, Prev: 辞書バッファの文字コードの設定, Up: 辞書関連

辞書バッファのメジャーモード
----------------------------

 辞書検索プログラムを実行すると、必要ならば辞書が Emacs のバッファに読
み込まれます。このバッファを辞書バッファと呼びます。

 辞書バッファの名前は、

 「空白+`*'+辞書ファイル名(ディレクトリ抜き)+`*'」

 という規則に基づいて付けられます。例えば、変数 `skk-large-jisyo' の値
が

`/usr/local/share/skk/SKK-JISYO.L'

 であるとき、これに対する辞書バッファ名は、

` *SKK-JISYO.L*'

となります。

このバッファのメジャーモードは `fundamental-mode' です。しかし、諸
般の事情により、変数 `major-mode' の値をシンボル skk-jisyo-mode、
変数 `mode-name' の値を文字列 `SKK dic' としています (1) 。

--------- Footnotes ---------

(1)  これは、Emacs の `dabbrev.el' の機能との調和を考えての措
置です。
Dabbrev においては、現在のバッファと同じモードの他のバッファを検索して
abbreviation の展開を行うように設定することができるのですが、仮に辞書
バッファにおける変数 `major-mode' の値が fundamental-mode のま
まだとすると、 Dabbrev が辞書バッファを検索してしまう可能性があります。
この措置によって、そのような事態を回避しています。



File: skk.info, Node: 辞書バッファのbuffer-file-name, Next: 辞書のアノテーション(註釈), Prev: 辞書バッファのメジャーモード, Up: 辞書関連

辞書バッファの`buffer-file-name'
--------------------------------

 Emacs には `save-some-buffers' という関数があります。この関数は、ファ
イルに関連付けられている各バッファについて、変更があればファイルに保存
しますが、実際に保存するかどうかを使用者に質問します。

 Emacs のコマンドには `M-x compile' のように、`save-some-buffers' を呼
び出すものがあります。もし、個人辞書の辞書バッファがファイル名と関連付
けられていたとしたら、こうしたコマンドを実行するたびに個人辞書を保存す
るかどうか質問されるので、面倒です。

DDSKK では、このような事態を避けるため、辞書バッファにおける変数
`buffer-file-name' の値を `nil' に設定しています。



File: skk.info, Node: 辞書のアノテーション(註釈), Prev: 辞書バッファのbuffer-file-name, Up: 辞書関連

辞書のアノテーション(註釈)
--------------------------

 辞書にアノテーション (註釈)を付けることができます (1) 。

 まだ、アノテーション機能を一度も使用していない場合は次の操作を行って下
さい。個人辞書を読みこみ、辞書を読み込んだバッファで

     M-x skk-annotation-update-jisyo-format

 を実行して下さい (2) 。

 アノテーションを付けるには、アノテーションを付けたい単語を確定した直後
に同じバッファで

     M-x skk-annotation-add

 とします。アノテーションを編集するバッファが開いて、カレントバッファに
なります。そこへアノテーションを付けます。編集が終わったら C-c C-c しま
す。

 `M-x skk-annotation-add'したものの、アノテーションを付けずに置きたいと
きは、

     M-x skk-annotation-kill

 とします。

 また、最後に確定した候補についてのアノテーションを取り去りたいときは、

     M-x skk-annotation-remove

 とします。

 アノテーションを表示させるには、変数`skk-show-annotation' を`non-nil'
にします。辞書の候補にアノテーションがあればエコーエリア (3) に表示しま
す。

 上記の動作でユーザが付けたアノテーションを「ユーザアノテーション」と呼
びます。ユーザアノテーションは、次の形式で個人辞書に保存されます。

     「きかん /期間/機関;*機関投資家/基幹;*基幹業務/」

このように `;' の直後に `*' の文字が自動的に振られます。これは
ユーザが独自に付けたアノテーションであることを示します (4) 。

 一方、共有辞書に元々付けられているアノテーションを「システムアノテーショ
ン」と呼び、これは `;' の直後に `*' の文字を伴いません。例えば、辞書の
形式は次のようになります。

     「いぜん /以前;previous/依然;still/」

 システムアノテーションは、L 辞書等に採用されています。

ユーザアノテーションとシステムアノテーションを区別することで、ユーザアノ
テーションだけを表示したり、あるいはその逆を行うことが可能です。
`skk-annotation-function'に表示したいアノテーションを
`non-nil' と判定する関数を書きます。

     (setq skk-annotation-function
           #'(lambda (annotation)
               (eq (aref annotation 0) ?*)))

 上記の例では、アノテーションの先頭が `*' で始まる「ユーザアノテーショ
ン」の場合に `t' を返すので、ユーザアノテーションだけを表示します。

--------- Footnotes ---------

 (1) Viper 対策はまだ行われていません。`~/.viper'に次のように書いて下さ
い。

     (viper-harness-minor-mode "skk-annotation")


(2) `;' の文字を含んだ候補は、eval すると`;'になる Lisp 式と
してquote されて辞書候補として収められなければなりません。
`skk-annotation-update-jisyo-format'を実行することにより、この作業
を行うことができます。アノテーション機能が使われる前の既存の辞書(個人辞
書、SKK-JISYO.L)については是非行っておいて下さい

(3) 変数 `skk-annotation-show-as-message'を `nil' にした場合
は、other-window を一時的に開いてアノテーションを表示します。
other-window はその候補について確定するか、その候補の選択を止める (次の
候補を選択したり、quit したり) すると自動的に閉じられます。

(4) `*' の文字は変換時には表示されません



File: skk.info, Node: DDSKK 以外のツールを用いた辞書変換, Next: 飾りつけ, Prev: 辞書関連, Up: 便利な応用機能

DDSKK 以外のツールを用いた辞書変換
==================================

* Menu:

* skk-lookup::                  Lookup を用いた辞書変換
* skk-look::                    look コマンドを用いた辞書変換



File: skk.info, Node: skk-lookup, Next: skk-look, Prev: DDSKK 以外のツールを用いた辞書変換, Up: DDSKK 以外のツールを用いた辞書変換

skk-lookup
----------

 `skk-lookup.el' を使用すると、辞書検索ツールの Lookup
(`http://openlab.jp/edict/lookup/') で検索できる辞書を用いて単語の候補
を出すことができるようになります (1) 。

 DDSKK をインストールする時に `SKK-CFG' を編集して、 `lookup.el' のある
パスを `ADDITIONAL_LISPDIR' に設定してインストールして下さい。自動的に
`skk-lookup.el' がインストールされます (2) 。

`~/.skk' に以下のように設定します。

     (setq skk-search-prog-list
           (append skk-search-prog-list
                   (list
                    '(skk-lookup-search))))

DDSKK が用意している検索プログラムの中で最も遅いため (3) 、
`skk-search-server' の後ろに持ってきてサーバの検索より後にします。

 Lookup の agent で利用するのは、 `lookup-search-agents' から ndkks,
ndcookie, ndnmz を取り去ったものです (4) 。

--------- Footnotes ---------

(1)  `skk-lookup.el'
は `skk-look.el' とは別ものです。

(2) 関数 `skk-lookup-search' が `skk-autoloads.el' に追加され
ます (*Note 辞書検索のための関数::).

(3) 6 倍速CD-ROM ドライブではストレスを感じる程、遅くありませんでした。
ローカルマシンのハードディスクにコピーして利用すると、速度的にはサーバ
と遜色ありません。ちなみに広辞苑の第四版を epwutil で `squeeze' す
ると辞書データのサイズは 45MB 弱になります。

(4) `skk-lookup-search-agents' にセットして検索するようにしていま
す。Lookup とは異なる設定をする場合、この変数の設定を変更すれば可能です



File: skk.info, Node: skk-look, Prev: skk-lookup, Up: DDSKK 以外のツールを用いた辞書変換

skk-look
--------

 `skk-look.el' は、 `look' コマンドを使って次の 3 つの機能を提供します
(1) 。

* Menu:

* 英単語の補完::
* 英単語をあいまいに変換して取り出す::
* 英単語をあいまいに変換して取り出した後、更に再帰的な英和変換を行う::

--------- Footnotes ---------

(1)  `skk-look.el' は `skk-lookup.el' とは名前が似てい
ますが全くの別ものです



File: skk.info, Node: 英単語の補完, Next: 英単語をあいまいに変換して取り出す, Prev: skk-look, Up: skk-look

英単語の補完
............

 `skk-use-look' を `non-nil' に設定すると `skk-look.el' が使用できるよ
うになります。

 例えば、 `~/.skk' で以下のように設定します。

     (setq skk-use-look t)

SKK abbrev mode が拡張されて、`look' コマンドを使用した補完が有効になり
ます。

     /abstr

     ------ Buffer: foo ------
     ▽abstr
     ------ Buffer: foo ------

     TAB

     ------ Buffer: foo ------
     ▽abstract
     ------ Buffer: foo ------


 と補完してくれます。通常の補完と同様に、`.' で次の補完候補、`,' でひと
つ前の補完候補に移動できます。

SKK 形式の英和辞書 (1) があれば、ここから SPC を押して英和変換ができます。

--------- Footnotes ---------

(1)  SKK 形式の英和辞書 edict が提供されています。
*Note 辞書の入手::.



File: skk.info, Node: 英単語をあいまいに変換して取り出す, Next: 英単語をあいまいに変換して取り出した後、更に再帰的な英和変換を行う, Prev: 英単語の補完, Up: skk-look

英単語をあいまいに変換して取り出す
..................................

 見出し語にアスタリスク (*) を入れて、SPC を押すと英単語をあいまいにし
て変換できます。


     ------ Buffer: foo ------
     ▽abstr*
     ------ Buffer: foo ------

     SPC

     ------ Buffer: foo ------
     ▼abstract
     ------ Buffer: foo ------


 確定すると、`abstr*' を見出し語、`abstract' を候補とするエントリが個人
辞書に追加されます。このようなエントリを追加したくない場合、ユーザー変
数、`skk-search-excluding-word-pattern-function' を適切に設定します。

 例えば次のような設定です。

     (add-hook 'skk-search-excluding-word-pattern-function
               ;; 返り値が non-nil の時、個人辞書に取り込まない。
               ;; KAKUTEI-WORD を引数にしてコールされるので、不要でも引数を取る
               ;; 必要あり
               #'(lambda (kakutei-word)
                   (and skk-abbrev-mode
                        (save-match-data
                          ;; SKK-HENKAN-KEY が "*" で終わるとき
                          (string-match "\\*$" skk-henkan-key))))))




File: skk.info, Node: 英単語をあいまいに変換して取り出した後、更に再帰的な英和変換を行う, Prev: 英単語をあいまいに変換して取り出す, Up: skk-look

英単語をあいまいに変換して取り出した後、更に再帰的な英和変換を行う
..................................................................

 `skk-look-recursive-search' の値を `non-nil' にセットして下さい。

     ▽abstr* (SPC)

       ---> ▼abstract (SPC) -> ▼アブストラクト (SPC) -> ▼抽象 (SPC)
         -> ▼abstraction (SPC) -> ▼アブストラクション

このように英単語 + その英単語を見出し語にした候補の「セット」を変換結果
として出力することができます。

 この際、`skk-look-expanded-word-only' の値が `non-nil' であれば、再帰
検索に成功した英単語の「セット」だけを出力することができます(再帰検索で
検出されなかった英単語は無視して出力しません) 。

 SKK 辞書に

        abstract /アブストラクト/抽象/
        abstraction /アブストラクション/

 というエントリがあることを前提としています (1) 。

--------- Footnotes ---------

(1)  edict 辞書、`SKK-JISYO.edict' があれば例えば、

     (setq skk-search-prog-list
           (append skk-search-prog-list
                   (list
                    '(skk-search-jisyo-file "/your-path/SKK-JISYO.edict" 0 t))))

のように設定することにより、 edict 辞書を使用できます。



File: skk.info, Node: 飾りつけ, Next: VIP/VIPERとの併用, Prev: DDSKK 以外のツールを用いた辞書変換, Up: 便利な応用機能

飾りつけ
========

* Menu:

* 仮名文字のローマ字プレフィックスのエコー::
* 入力モードを示すモードラインの文字列の変更::
* 入力モードを示すカーソル色に関する設定::
* ▼モードにおける変換候補のハイライト表示::
* エラーなどの日本語表示::
* XEmacs & Emacs 21 のモードライン::



File: skk.info, Node: 仮名文字のローマ字プレフィックスのエコー, Next: 入力モードを示すモードラインの文字列の変更, Prev: 飾りつけ, Up: 飾りつけ

仮名文字のローマ字プレフィックスのエコー
----------------------------------------

`skk-echo'

     この変数の値は、仮名文字のローマ字プレフィックス (1) のエコーの有
     無を制御します。

 変数 `skk-echo' の値が 非 `nil' であれば、仮名文字のローマ字プレフィッ
クスが、入力時点で一旦現在のバッファに挿入され、続く母音の入力の際に、
かな文字に変換された時点で現在のバッファから消去されます。

     t

     ------ Buffer: foo ------
     t
     ------ Buffer: foo ------

     a

     ------ Buffer: foo ------
     た
     ------ Buffer: foo ------

 変数 `skk-echo' の値が `nil' であれば、仮名文字のローマ字プレフィック
スのエコーは行われません。これを上記の例で考えると、`t' が現在のバッファ
に挿入されず、続く母音 (`a') が入力されたとき `た' の文字が挿入されます。

--------- Footnotes ---------

(1)  *Note ローマ字プレフィックス: 辞書の形式.



File: skk.info, Node: 入力モードを示すモードラインの文字列の変更, Next: 入力モードを示すカーソル色に関する設定, Prev: 仮名文字のローマ字プレフィックスのエコー, Up: 飾りつけ

入力モードを示すモードラインの文字列の変更
------------------------------------------

 下記の変数の値を変更することにより、モード行において入力モードを示す文
字列が変更されます。

`skk-latin-mode-string'

     アスキーモードを示す文字列。標準では、"SKK"。

`skk-hiragana-mode-string'

     かなモードを示す文字列。標準では、"かな"。

`skk-katakana-mode-string'

     カナモードを示す文字列。標準では、"カナ"。

`skk-jisx0208-latin-mode-string'

     全英モードを示す文字列。標準では、"全英"。



File: skk.info, Node: 入力モードを示すカーソル色に関する設定, Next: ▼モードにおける変換候補のハイライト表示, Prev: 入力モードを示すモードラインの文字列の変更, Up: 飾りつけ

入力モードを示すカーソル色に関する設定
--------------------------------------

`skk-use-color-cursor'

     この変数の値が非 `nil' ならば、カーソルに色付けします。`nil' なら
     ば、この機能を無効にします。

     標準では、ウィンドウシステムを使用していてなおかつ色表示が可能な場
     合に限り、この機能が有効になります。

 この機能が有効になっているとき、以下の変数の値を変更することで、各モー
ドにおけるカーソルの色が変更されます。

`skk-cursor-default-color'

     SKK モードがオフであることを示すカーソル色。標準では、カーソルのあ
     る該当フレームにおける標準のカーソル色を使います。

`skk-cursor-hiragana-color'

     かなモードであることを示すカーソル色。標準では、背景の明暗により
     coral4" または "pink" を用います。

`skk-cursor-katakana-color'

     カタカナモードであることを示すカーソル色。標準では、背景の明暗によ
     り"forestgreen" または "green" を用います。

`skk-cursor-jisx0208-latin-color'

     全角英字モードであることを示すカーソル色。標準では、"gold" を用い
     ます。

`skk-cursor-latin-color'

     アスキーモードであることを示すカーソル色。標準では、背景の明暗によ
     り"ivory4" または "gray" を用います。



File: skk.info, Node: ▼モードにおける変換候補のハイライト表示, Next: エラーなどの日本語表示, Prev: 入力モードを示すカーソル色に関する設定, Up: 飾りつけ

▼モードにおける変換候補のハイライト表示
----------------------------------------

`skk-use-face'

     この変数の値が非 `nil' であれば、Emacs のフェイス機能を使って変換
     候補をハイライト表示します。

     このハイライト表示には Emacs のオーバーレイ (overlay) の機能を使い
     ます (1) 。

`skk-henkan-face'

     この変数の値はフェイスであり、このフェイスによって変換候補がハイライト表
     示されます。既定値は highlight です。

変数 `skk-henkan-face' には、既存のフェイス (2) を指定できますが、新
たにフェイスを作ることもできます。そのために、以下の関数が用意されていま
す。

`skk-make-face'

     形式: (skk-make-face FACE)

     この関数は、引数 FACE と同じ名前のフェイスを作成して、そのフェイス
     を返します。フェイスの前景色・背景色は、引数 FACE によって、例えば
     以下の例のように決定されます。

          (setq skk-henkan-face (skk-make-face 'DimGray/PeachPuff1))

     この場合、前景色は DimGray に、背景色は PeachPuff1 になります。

     もうひとつ例を挙げます。

          (skk-make-face 'RosyBrown1)

     この場合、前景色は DimGray になります。背景色はもちません。つまり、
     バッファの背景色がそのまま見えます。

--------- Footnotes ---------

 (1) 以前のバージョンではテキスト属性 (text property) を使用していまし
た。

 オーバーレイ属性はテキスト属性と異なり、テキストの一部とは見なされませ
ん。そのため、テキストのコピーの際にオーバーレイ属性は保存されません。
その他にも、オーバーレイの移動やその属性の変更はバッファの変更とは見な
されないこと、オーバーレイの変更はバッファのアンドゥリストに記録されな
いこと、などが特徴として挙げられます。

なお、XEmacs にはオーバーレイ機能はありません。代わりに extent というも
のが用意されているのでそれを利用します。

(2) Emacs 標準 では default, modeline, region,
secondary-selection, highlight, underline, bold,
italic, bold-italic があります。



File: skk.info, Node: エラーなどの日本語表示, Next: XEmacs & Emacs 21 のモードライン, Prev: ▼モードにおける変換候補のハイライト表示, Up: 飾りつけ

エラーなどの日本語表示
----------------------

 標準では、エラー、メッセージおよびミニバッファでのプロンプトは、英語で
表示されます。

`skk-japanese-message-and-error'

     この変数の値を非 `nil' に設定すると、エラー、メッセージおよびミニ
     バッファでのプロンプトを日本語で表示します。



File: skk.info, Node: XEmacs & Emacs 21 のモードライン, Prev: エラーなどの日本語表示, Up: 飾りつけ

XEmacs & Emacs 21 のモードライン
--------------------------------

 XEmacs および Emacs 21 では以下の機能が使用できます。

DDSKK のインジケータをモード行の左に表示している場合 (1) 、
カーソルの色と同じ色が付くようになりました。また、モード行の DDSKK のイ
ンジケータをマウスなどのポインティングデバイスの第 2ボタンをクリックする
とメニューが表示されます。

DDSKK のインジケータの色を付けない場合は、変数
`skk-indicator-use-cursor-color'を `nil' にします。

 インジケータに独自色を使いたい場合は、以下のフェイスを設定します。この
場合カーソルの色は参照しません。

 Emacs 21 の場合

     `skk-e21-hiragana-face'
     `skk-e21-katakana-face'
     `skk-e21-jisx0208-latin-face'
     `skk-e21-jisx0201-face'
     `skk-e21-abbrev-face'

 XEmacs の場合

     `skk-xemacs-hiragana-face'
     `skk-xemacs-katakana-face'
     `skk-xemacs-jisx0208-latin-face'
     `skk-xemacs-latin-face'
     `skk-xemacs-jisx0201-face'
     `skk-xemacs-abbrev-face'


--------- Footnotes ---------

(1)  デフォルト
では、左です。*Note 起動と終了::.

*Note Q.3-1 インジケータをモード行の左端に置きたいのですが。::.



File: skk.info, Node: VIP/VIPERとの併用, Next: I-search関連, Prev: 飾りつけ, Up: 便利な応用機能

VIP/VIPERとの併用
=================

`skk-use-viper'

     この変数の値を非 `nil' に設定すると、VIPER に対応します。

 VIPER については *Note VIPER: (viper)Top を参照してください。

 また、VIPER の前身である VIP にも対応します。ただし、正式に対応してい
るバージョンは 3.5 のみです。これは Mule 2.3 に標準添付します (1) 。

--------- Footnotes ---------

(1)  ちなみに、VIP 3.5 の作者は、SKKの原作者でもある佐藤雅彦教授で
す。VIP 3.5 の発展版である VIPER は現在もメンテナンスされています。Emacs
19, 20 には、VIP 、VIPER とも標準添付します。



File: skk.info, Node: I-search関連, Next: skk-init-fileのコンパイル, Prev: VIP/VIPERとの併用, Up: 便利な応用機能

I-search関連
============

* Menu:

* 起動時の入力モードの指定::
* 間に空白等を含む文字列の検索::



File: skk.info, Node: 起動時の入力モードの指定, Next: 間に空白等を含む文字列の検索, Prev: I-search関連, Up: I-search関連

起動時の入力モードの指定
------------------------

`skk-isearch-use-previous-mode'

     この変数の値が非 `nil' であれば、次のインクリメンタル・サーチ起動
     時の入力モードは、前回のインクリメンタル・サーチでの入力モードにな
     ります。

`skk-isearch-start-mode'

     この変数の値は、インクリメンタル・サーチの起動時の入力モードを決定
     します。ただし変数 `skk-isearch-use-previous-mode' の値が非 `nil'
     ならば、そちらの機能が優先されます。

     この変数は以下の値を取り得ます。

     latin

          アスキーモード

     hiragana

          かなモード

     jisx0208-latin

          全英モード



File: skk.info, Node: 間に空白等を含む文字列の検索, Prev: 起動時の入力モードの指定, Up: I-search関連

間に空白等を含む文字列の検索
----------------------------

 `検索'という文字列をインクリメンタル・サーチにより検索する場合に、バッ
ファが以下のような状態になっていることがあります。

     -------- Buffer: foo --------
     この行末から始まる文字列を検
     索して下さい。
     -------- Buffer: foo --------

 このような場合のために、Emacs は正規表現によるインクリメンタル・サーチ
を提供しています。DDSKK はこの正規表現によるインクリメンタル・サーチに
も対応しているため、空白や改行を含んだ検索も可能です。

`M-x isearch-forward-regexp'

     前方への正規表現によるインクリメンタル・サーチ。
     `C-u C-s' または `M-C-s' で起動します。

`M-x isearch-backward-regexp'

     後方への正規表現によるインクリメンタル・サーチ。
     `C-u C-r' または `M-C-r' で起動します。

 以下は空白や改行の処理を制御する変数です。

`skk-isearch-whitespace-regexp'

     この変数の値は正規表現です。この正規表現にマッチする要素は、正規表
     現によるインクリメンタル・サーチにおいては、単語を区切る要素ではな
     いと判断されます。この変数の既定値は以下のようになっています。

          "\\(\\s \\|[ \t\n\r\f]\\)*"

 変数 `skk-isearch-whitespace-regexp' の値を変更することで、正規表現に
よるインクリメンタル・サーチを拡張することができます。例えば、電子メー
ルの引用部分を検索する場合を考えます。

     > 引用部分も検
     > 索できる。

 上記のうち、「検索」という語は 2 行にわたっているうえ引用マークが挿入
されています。ここで

     (setq skk-isearch-whitespace-regexp "\\(\\s \\|[ \t\n\r\f<>|]\\)*")

と設定することにより、「検索」を検索できるようになります。



File: skk.info, Node: skk-init-fileのコンパイル, Next: picture-modeとの併用, Prev: I-search関連, Up: 便利な応用機能

`skk-init-file'のコンパイル
===========================

`skk-byte-compile-init-file'

     この変数の値が非 `nil' であれば、DDSKK の起動時に DDSKK の設定ファ
     イル (標準では `~/.skk') を必要に応じてバイトコンパイルします。

     この変数の値が `nil' であれば、DDSKK の設定ファイルをバイトコンパ
     イルしたファイルを消去します。

     この機能を有効にしたい場合は、`~/.emacs' に

          (setq skk-byte-compile-init-file t)

     と記述します。 (1)

--------- Footnotes ---------

(1)  この変数は DDSKK の設定ファイルが読み込まれる前に調べられるの
で、DDSKK の設定ファイルに上記の設定を書いてもこの機能は有効になりません。



File: skk.info, Node: picture-modeとの併用, Next: サーバ関連, Prev: skk-init-fileのコンパイル, Up: 便利な応用機能

`picture-mode'との併用
======================

 SKK モードを `picture-mode' において使用した場合は、以下のような問題点
があります。ただし、これらは `picture-mode' の問題なので、現在のところ
DDSKK 側では対処していません。

  1. SKK モードで全角文字を入力した場合に、BSで全角文字を消すことができ
     ません。現状では、後方にある文字を消したい場合は、その文字にポイン
     トを合わせ、`C-c C-d'で一文字づつ消す必要があります。

  2. コマンド `picture-movement-up' や `picture-movement-down' により上
     下に全角文字を挿入した場合に、桁がずれる場合があります。

 関数 `move-to-column-force' の中で使用されている関数`move-to-column'
の引数として、全角文字を無視した桁数が与えられることがあり、そのときカー
ソル移動ができないため、これらの問題が生じます。



File: skk.info, Node: サーバ関連, Prev: picture-modeとの併用, Up: 便利な応用機能

サーバ関連
==========

`skk-servers-list'

     この変数を使うと、複数のホスト上の辞書サーバを使い分けることができ
     ます。

     この変数の値は、辞書サーバ毎の情報リストです。各リストは 4 つの要素か
     ら成ります。4 つの要素はそれぞれ、ホスト名、サーバ名 (フルパス)、サーバ
     が読みこむ辞書名、サーバが使用するポート番号、となります。ただし、辞書、
     およびポート番号は、サーバ自身が決定することもあるため、そのような場合は
     `nil' として構いません。

     例えば、以下のように設定します。

          (setq skk-servers-list
                '(("host1" "/your/path/to/skkserv" nil nil)
                  ("host2" "/your/path/to/skkserv" nil nil)))

     上記の設定の場合、まず host1 上のサーバと接続します。接続できなく
     なると、次に host2 上のサーバと接続します。

`skk-server-report-response'

     この変数の値が非 `nil' であれば、変換時に、サーバの送出する文字を
     受け取るまでに関数 `accept-process-output' が実行された回数を報告
     します。

`skk-server-inhibit-startup-server'

     この変数を `nil' に設定すると、SKK サーバと接続できない場合に、
     SKK サーバプログラムを `call-process' して立ち上げようと試みます
     (デフォルト値は `t' です)。inetd 経由で立ち上げられる多くの SKK サー
     バは、`call-process' で立ち上げることができませんが、`skkserv' の
     ように立ち上げることができるサーバを利用している場合には、この変数
     を `nil' に設定するのが良いかもしれません。

`skk-server-remote-shell-program'

     この変数には、リモートシェルのプログラム名を指定します。既定値は、
     システム依存性を考慮する必要があるため、以下の Emacs Lisp コードを
     評価することにより決定されています。

          (or (getenv "REMOTESHELL")
              (and (boundp 'remote-shell-program) remote-shell-program)
              (cond
               ((eq system-type 'berkeley-unix)
                (if (file-exists-p "/usr/ucb/rsh") "/usr/ucb/rsh" "/usr/bin/rsh"))
               ((eq system-type 'usg-unix-v)
                (if (file-exists-p "/usr/ucb/remsh") "/usr/ucb/remsh" "/bin/rsh"))
               ((eq system-type 'hpux) "/usr/bin/remsh")
               ((eq system-type 'EWS-UX/V) "/usr/ucb/remsh")
               ((eq system-type 'pcux) "/usr/bin/rcmd")
               (t "rsh")))



File: skk.info, Node: 辞書ツール, Next: DDSKK 12 からの変更点, Prev: 便利な応用機能, Up: Top

辞書ツール
**********

 SKK 辞書に関するツールには、Perl, C の各言語により書かれていましたが、
Perl によるツールは現在十分メンテナンスされていません。現在は C, ruby
のプログラムが開発・メンテナンスされています。

辞書メンテナンスツール
     `http://openlab.jp/skk/wiki/wiki.cgi?page=%BC%AD%BD%F1%A5%E1%A5%F3%A5%C6%A5%CA%A5%F3%A5%B9%A5%C4%A1%BC%A5%EB'



File: skk.info, Node: DDSKK 12 からの変更点, Next: 拡張アイディア, Prev: 辞書ツール, Up: Top

DDSKK 12 からの変更点
*********************

 本章では DDSKK 13 における DDSKK 12 からの変更点をまとめます。より詳し
い変更内容と更に過去の変更点については以下のリソースを参照してください。

     `http://openlab.jp/skk/skk/main/READMEs/NEWS.ja'

対応する Emacs のバージョン

     Emacs 22.1 を正式サポートしました。他に Emacs 20.7、Emacs 21.1 か
     ら 21.4、XEmacs 21.4.18 以降をサポートします。

単漢字変換の正式サポート

     読みの最後に、読みの一部として `@' を入力してから変換すると、一
     文字のみからなる候補に絞り込んだ上で、候補を総画数順でソートしてから変
     換する単漢字変換機能を正式にサポートしています。詳細は、
     `skk-tankan.el' の中のドキュメントを参照して下さい。

ヒント入力の正式サポート

     見出し語の最後に ; を入力してからヒントとなる単語を入力することで
     変換候補を絞り込めるプログラム `skk-hint.el' を正式サポートしまし
     た。

文脈に応じて SKK の動作を自動的に制御する機能の正式サポート

     この機能は `context-skk.el' により提供されます。編集の文脈に応じて
     自動的に ASCII (latin) モードに切り替える機能、編集の文脈に応じて
     SKK の設定をユーザの任意に変更するカスタマイズ機能が搭載されていま
     す。

変換候補・注釈表示の修飾・加工機能

     変数 `skk-treat-candidate-appearance-function' を設定することにより、
     注釈も含めた変換候補の表示のカスタマイズが可能になりました。この設定例は
     `etc/dot.skk' などで紹介していく予定です。

     この機能は候補や注釈の文字列そのものを変更することができます。また、
     文字列に text property を付加して装飾して表示することもできます。
     この機能は通常の候補変換時と注釈表示時、候補一覧表示時に有効です。
     ツールティップやインラインによる表示時にも有効です。ただし、text
     property による修飾機能が完全にサポートされるのは GNU Emacs 21 以
     降となります。それ以外のバージョンはツールティップの表示はできず、
     またインライン表示とエコーエリア表示時のメッセージは text
     property 非対応です。これらのバージョンで text property を有効にす
     るにはバッファをポップアップする必要があります。そのための設定は以
     下のようになります。

          (setq skk-annotation-show-as-message t)
          (setq skk-show-candidates-always-pop-to-buffer t)

数値変換有効時に非数値変換も同時に行うように変更

     今まで、 `skk-use-numeric-conversion' が non-nil だと数値変換のみ行
     い、非数値変換は無効にするようになっていましたが、排他的である必要はない
     と考えられたので、常に非数値変換は行うようにしました。これにより、
     `skk-use-numeric-conversion' を有効にしている場合でも

          10^-1 /deci;SI接頭語/d/デシ/
          10^-2 /centi;SI接頭語/c/センチ/
          10^-3 /milli;SI接頭語/m/ミリ/

     などの変換もできます。ただし、単語登録モードに入ると数値変換の候補
     として扱われます。

インラインの候補一覧表示

     変数 `skk-show-inline' を non-nil に設定することで、候補一覧を変換
     位置の近傍に表示できます。この機能は window system に依存しないた
     めterminal でも利用できます。この機能は Emacs 20, XEmacs でも利用
     できますが、face 表示に対応しているのは GNU Emacs 21 以降のみです。

ツールティップを利用した候補一覧・注釈表示

     変数 `skk-show-tooltip' を non-nil に設定することで、
     window-system 下にて候補一覧表示と注釈表示をバルーンヘルプにするこ
     とができるようになりました。これは現在 GNU Emacs 21 以降、XEmacs
     21.5 以降で動作します。

新しい学習機能 skk-bayesian.el

     `experimental/bayesian' に追加されました。候補の利用される確率を過
     去の変換履歴の分析により計算することで変換精度を向上させます。




File: skk.info, Node: 拡張アイディア, Next: SKKメーリングリスト, Prev: DDSKK 12 からの変更点, Up: Top

拡張アイディア
**************

 本章には、将来のバージョンに託された拡張アイディアについて記述します。
実現可能かどうかに関しては必ずしも触れません。

これ以外にも要望、拡張の具体的アイディアがあれば、
<skk@ring.gr.jp> に連絡いただけることを期待します。
*Note SKKメーリングリスト::.

   * FLIM (1) に含まれる luna という Emacs Lisp で Object Oriented
     programming を可能にするプログラムがあります。著名どころでは、
     Wanderlust や Emacs-w3m のShimbun ライブラリが luna を利用していま
     す。DDSKK は Emacs のバッファに直接読み込む辞書、サーバ経由の辞書、
     Lookup とのゲートウェイによる辞書など沢山の辞書があり、また、キー
     ボード入力にも TUT-Code や NICOLA など色々な種類をサポートしていま
     す。luna を利用することにより、これらのそれぞれの機能のために、そ
     れぞれ個別に書かれた処理を一元管理することができるようになるのでは
     ないかと考えています。

   * 辞書の個々の見出し語、候補に属性を持たせる。それにより、例えば、次
     のような機能を実装する。

       1. その属性の内容により、変換の際に候補の絞り込み条件を指定できるようにする。
          その際、絞り込み条件はユーザーの任意に変更できるようにする。一例をあげれ
          ば、サ変動詞になり得る名詞に適当な属性を持たせ、`〜する' という送り
          仮名が入力された場合には、そのサ変動詞属性を持った名詞のみを候補として出
          力する、など活用の幅は非常に広い。サ変動詞の問題については、
          *Note 辞書登録モード:: も参照のこと。

       2. 候補に最終の変換時刻などを属性として持たせ、辞書のメンテナン
          スに利用する(一定期間アクセスのない候補を個人辞書から削除する
          など)。

       3. 候補に関する意味を属性として持たせ、意味を調べるような拡張変
          換を行えるようにする。

     言うは易しだが、色々な未解決の問題がある。多数の見出し語や候補に属
     性を持たせて、通常の変換効率をできる限り落さないで、かつ効率良く属
     性のメンテナンスを行う方法を模索することがまず大変。Emacs のバッファ
     に読み込む辞書とサーバ経由でアクセスしている辞書とがあることも検討
     事項。Emacs 側の機能で対応した場合にサーバ経由の辞書属性をどうやっ
     て得るか、またはその逆が課題である。コーディング抜きであってもアイ
     ディアをいただけたら幸いである。

   * Canna や Wnn のサーバと接続して検索が可能になるようにする (2) 。

   * いかなるユーザーオプション変数をバッファローカル化しても動作するよ
     うにすること。luna 化により解決する?

   * 部首変換プログラムと辞書を作ること。

--------- Footnotes ---------

(1)  `http://www.kanji.zinbun.kyoto-u.ac.jp/~tomo/elisp/FLIM/'

(2) Tamago 4 では、Emacs Lisp ベースでサーバと接続できる。

`http://www.m17n.org/tamago/'



File: skk.info, Node: SKKメーリングリスト, Next: DDSKKの入手方法, Prev: 拡張アイディア, Up: Top

SKKメーリングリスト
*******************

 SKK Openlab メーリングリストは、統一された一つの ML です。利用者用、開
発者用などと分かれていない他、SKK 辞書、DDSKK の開発議論が中心ですが、
SKK サーバやフロントエンド、 SKK 辞書ツールの話題なども議論の範囲に入り
ます。

メーリングリストに参加する場合

     <skk-subscribe@ring.gr.jp> 宛てに空のメールを送って下さい。確認の
     為のメッセージが指定されたアドレス宛に送信されます。その確認の為の
     メッセージに対して、返信することで加入手続きは終了します。

メーリングリストから脱会する場合

     <skk-unsubscribe@ring.gr.jp> 宛てに空のメールを送って下さい。確認
     の為のメッセージが指定されたアドレス宛に送信されます。その確認の為
     のメッセージに対して、返信することで脱退手続きは終了します。

登録したアドレスの変更する場合

     古いアドレスについて一旦 unsubscribe して、新しいアドレスから再度
     subscribe して下さい。

記事の投稿

     <skk@ring.gr.jp> へ送ります。メーリングリストに登録されている人全
     員にメールが配信されます。

過去ログの閲覧

     `http://mail.ring.gr.jp/skk'
     `news://news.ring.gr.jp/ring.openlab.skk'



File: skk.info, Node: DDSKKの入手方法, Next: SKK関連ソフトウェア, Prev: SKKメーリングリスト, Up: Top

DDSKKの入手方法
***************

 SKK Openlab のホームページでは、DDSKK の最新版を配布するためのページを
設けています。

日本語 URL

     `http://openlab.jp/skk/main-ja.html'

英語 URL

     `http://openlab.jp/skk/main.html'

 DDSKK の開発は、Ring Server Open Laboratory (http://openlab.jp) に参加
する形で行われています。そしてその開発には CVS が用いられています。CVS
の利用のしかたと開発の方法については以下を参照してください。

日本語 URL

     `http://openlab.jp/skk/cvs-ja.html'

英語 URL

     `http://openlab.jp/skk/cvs.html'



File: skk.info, Node: SKK関連ソフトウェア, Next: 最新情報など, Prev: DDSKKの入手方法, Up: Top

SKK関連ソフトウェア
*******************

 SKK 関連ソフトウェアに関しては、以下の URL にリンクをまとめてあります
ので参照してください。


SKK 関連リンク
     `http://openlab.jp/skk/links-ja.html'

SKK 辞書 Wiki におけるリンク集
     `http://openlab.jp/skk/wiki/wiki.cgi?page=%A5%EA%A5%F3%A5%AF%BD%B8'



File: skk.info, Node: 最新情報など, Next: SKKの歴史, Prev: SKK関連ソフトウェア, Up: Top

最新情報など
************

* Menu:

* 最新情報::
* 謝辞::
* SKK辞書について::
* SKKの作者::
* このマニュアルについて::



File: skk.info, Node: 最新情報, Next: 謝辞, Prev: 最新情報など, Up: 最新情報など

最新情報
========

 DDSKK についての最新情報は、

`http://openlab.jp/skk/'

から得ることができます。

SKK Openlab では、開発者、文章の整備にご協力いただける方、テスター、よろ
ずものを言う人などなど、常に募集しています。
*Note SKKメーリングリスト::.

 また、SKK の開発は、 CVS によってなされています。CVS を使って最新の
SKK を取得する場合、CVS account を取得して開発に参加される場合は、以下
を参照してください。

     `http://openlab.jp/skk/cvs-ja.html'



File: skk.info, Node: 謝辞, Next: SKK辞書について, Prev: 最新情報, Up: 最新情報など

謝辞
====

 DDSKK の開発は、Ring Server Open Laboratory (http://openlab.jp) (オー
プンラボラトリ) に `SKK Openlab' として参加する形で行われています。
`SKK Openlab' は Ring から共有ディスク、CVS 及びML の提供を受けています。
オープンラボラトリの運営は、完全にボランティアにより行われております。
Ring 並びにオープンラボラトリにかかわる皆さんに深く感謝いたします。

 (以降の記載は、SKK の原作者、佐藤雅彦教授により記載された旧来のマニュ
アルのものですが、歴史的意義を踏まえて、そのまま掲載します。)

 SKK の設計方針は TAO/ELIS 上の日本語入力システム Kanzen の影響を受けて
います。Kanzen のデモを行ってくださり、また Kanzen を使う機会を与えてく
ださった NTT の竹内郁雄さんに感謝します。

 第 1 版の辞書作成のための読みの入力を行ってくださった東北大学電気通信
研究所佐藤研究室の 安藤大君、猪岡美紀さん、奥川淳一君、佐々木昭彦君、佐
藤克志君、山岸信寛君に感謝します。

 SKK 辞書第 2, 3, 4, 5, 6, 7, 8 版作成のためのデータを提供してくださっ
た方々に感謝します。

 SKK 辞書第 6, 7 版作成にあたり協力してくださった高橋裕信氏に感謝します。



File: skk.info, Node: SKK辞書について, Next: SKKの作者, Prev: 謝辞, Up: 最新情報など

SKK辞書について
===============

 SKK 辞書は多くのユーザの方々から提供された辞書によりコピーフリーの辞書
としては最大規模の辞書になっています。今後もこの方式により SKK 辞書をよ
り充実したものにしていきたいと思います。

 SKK 辞書に追加したい単語、誤登録として削除したい単語があるようでしたら、
`http://openlab.jp/skk/registdic.cgi' にて Web/cgi を利用した登録・削除
希望フォームを運用しておりますので、是非ご利用下さい。



File: skk.info, Node: SKKの作者, Next: このマニュアルについて, Prev: SKK辞書について, Up: 最新情報など

SKKの作者
=========

 SKK の原作者は、現京都大学の佐藤雅 彦教授
(http://www.sato.kuis.kyoto-u.ac.jp/member/masahiko-j.html)です。

現在の DDSKK は、大勢のボランティアの貢献により成立しています。以下は確
認されている貢献者名です。ここに入っていない貢献者がおられる場合、email
address が変更になり credit をこれに合わせたい場合には、追加、修正いたし
ますので、ご遠慮なく SKK Openlab の管理人
<skk-owner@ring.gr.jp> までご一報ください。

   中津山 恒 <hisashi@rst.fujixerox.co.jp>
   小関 吉則 <kose@emailizard.tamra.co.jp>
   小野 孝男 <takao@hirata.nuee.nagoya-u.ac.jp>
   松井孝雄/MATUI Takao <mat@nuis.ac.jp>
   進藤裕志 <shindo@super.ees.saitama-u.ac.jp>
   沈志勇 <jshen@cas.org>
   柘植 正大 <ma-tsuge@kdd.co.jp>
   Akihiro Motoki  <amotoki@dd.iij4u.or.jp>
   Chikanobu Toyofuku <unbound@papaya.juice.or.jp>
   Daiki Ueno <ueno@unixuser.org>
   EGUCHI Satoshi <eguchi@kyoto-wu.ac.jp>
   Eiji Obata <obata@suzuki.kuee.kyoto-u.ac.jp>
   FUKANO Masaaki <fukano-m@alp.cs.uec.ac.jp>
   Fukaya Shigeru <SFUKAYA@oracle.co.jp>
   FURUE Hideyuki <furue@kke.co.jp>
   GUNJI Takao <gunji@sils.shoin.ac.jp>
   G. Yoshida <grothendieck@max.hi-ho.ne.jp>
   Haru Mizuno <mizu@cs3.cs.oki.co.jp>
   Haru'yasu Ueda <hal@sics.se>
   Hideki Sakurada <sakurada@kuis.kyoto-u.ac.jp>
   Hiroya Murata <lapis-lazuli@pop06.odn.ne.jp>
   Hiroyuki KUROSAKI  <noir@st.rim.or.jp>
   Hisao Kuroda <kuroda@msi.co.jp>
   IIDA Yosiaki <iida@ring.gr.jp>
   IRIE Tetsuya <irie@t.email.ne.jp>
   ISHIKAWA Naoya <ml@be.to>
   Jun-ichi Nakamura <nakamura@pluto.ai.kyutech.ac.jp>
   Katuya Tomioka <tomioka@culle.l.chiba-u.ac.jp>
   Kazuo Hirokawa <hirokawa@rics.co.jp>
   Kazushi Marukawa <kazushi@kubota.co.jp>
   Keisuke Nishida <kxn30@po.cwru.edu>
   Kenichi OKADA <okada@opaopa.org>
   Kenji Rikitake <kenji@reseau.toyonaka.osaka.jp>
   Kenji Yamashita <kenji@cs.titech.ac.jp>
   Kentaro Fukuchi <fukuchi@users.sourceforge.net>
   KIHARA Hideto <deton@m1.interq.or.jp>
   Kimura Chikahiro <kimura@oa1.kb.nec.co.jp>
   Kimura Fuyuki <fuyuki@hadaly.org>
   Kitamoto Tsuyoshi <fmv5200na8x@yahoo.co.jp>
   Koichi MORI <kmori@onsei2.rilp.m.u-tokyo.ac.jp>
   KOIE Hidetaka (鯉江英隆) <hide@koie.org>
   Koji Uchida <uchida@cfd.tytlabs.co.jp>
   KURIHARA Kenichi <kenichi_kurihara@nifty.com>
   Makoto MATSUSHITA <matusita@ics.es.osaka-u.ac.jp>
   Manabu Kawashima <kaw@lp.nm.fujitsu.co.jp>
   Martin Buchholz <martin@xemacs.org>
   Masahiko Suzuki <suzmasa@sm.sony.co.jp>
   Masahiro Doteguchi <xdote@rp.open.cs.fujitsu.co.jp>
   Masakazu Takahashi <masaka-t@ascii.co.jp>
   Masatake YAMATO <masata-y@is.aist-nara.ac.jp>
   NAKAJIMA Mikio <minakaji@osaka.email.ne.jp>
   MINOURA Itsushi <minoura@uni.zool.s.u-tokyo.ac.jp>
   MITA Yuusuke <clefs@mail.goo.ne.jp>
   MIYOSHI Tsutomu <minkov@fuzzy.or.jp>
   Motohiko Mouri <mouri@jaist.ac.jp>
   Murata Shuuichirou <mrt@notwork.org>
   Naoki HAMADA <nao@mimo.jaist-east.ac.jp>
   Naoki Wakamatsu <naoki-w@ht-net21.ne.jp>
   NEMOTO Takashi <tnemoto@mvi.biglobe.ne.jp>
   NISHIDA Keisuke <knishida@nn.iij4u.or.jp>
   Norio Maeda  <nmaeda@dd.iij4u.or.jp>
   ONODA Arata  <onoto@ma.nma.ne.jp>
   Rei FURUKAWA <furukawa@tcp-ip.or.jp>
   Ryoichi Hashimoto <gnu@ipri.go.jp>
   SAKAI Kiyotaka <ksakai@kso.netwk.ntt-at.co.jp>
   Satoshi Harauchi <satoshi@sys.sdl.melco.co.jp>
   Seiichi NAMBA <sn@asahi-net.email.ne.jp>
   Sekita Daigo <sekita@mri.co.jp>
   Shigeru OKUMURA <shigeru@okunet.gr.jp>
   Shuhei KOBAYASHI <shuhei@aqua.ocn.ne.jp>
   Shuji Ashizawa <ashizawa@zuken.co.jp>
   SIMOYAMA Takasi <simo@festa.or.jp>
   SL Baur <steve@altair.xemacs.org>
   sphere <sphere@pop12.odn.ne.jp>
   Stephen Turnbull <turnbull@sk.tsukuba.ac.jp>
   SUZUKI Hitoshi <sigh@kuzirabekon.econ.nagasaki-u.ac.jp>
   TAKAHASHI Kaoru <kaoru@kaisei.org>
   Takao KAWAMURA <kawamura@ike.tottori-u.ac.jp>
   Takeshi OHTANI <ohtani@iias.flab.fujitsu.co.jp>
   Tatsuya Kinoshita <tats@vega.ocn.ne.jp>
   Thierry Emery <Thierry.Emery@nmu.alcatel.fr>
   TOKUYA Junichi <tokuya@crab.fuji-ric.co.jp>
   Tomotaka SUWA <cooper@saitama.fujimic.fujisankei-g.co.jp>
   Tomoyuki Hiro <hiro@momo.it.okayama-u.ac.jp>
   Toru YANO <toru@maid.ne.jp>
   Toyonobu Yoshida <toyono-y@is.aist-nara.ac.jp>
   Tsugutomo Enami <enami@ptgd.sony.co.jp>
   Tsukamoto Tetsuo <czkmt@remus.dti.ne.jp>
   TSUMURA Tomoaki <tsumura@kuis.kyoto-u.ac.jp>
   Tsuyoshi AKIHO <akiho@sky.email.ne.jp>
   Wataru Matsui <matsui@atr-rd.atr.co.jp>
   Wataru Matsui <matsui@gf.hm.rd.sanyo.co.jp>
   YAGI Tatsuya <ynyaaa@ybb.ne.jp>
   YAMASHITA Junji <ysjj@unixuser.org>
   Yoshida Toyonobu <toyono-y@is.aist-nara.ac.jp>
   Yukihiro Nakai <ynakai@redhat.com>
   Yoshiki Hayashi <yoshiki@xemacs.org>
   YOSHIZAWA Masahiro <manbou@ceres.dti.ne.jp>
   Yuh Ohmura <yutopia@t3.rim.or.jp>
   Yukiyoshi Kameyama <kameyama@kuis.kyoto-u.ac.jp>



File: skk.info, Node: このマニュアルについて, Prev: SKKの作者, Up: 最新情報など

このマニュアルについて
======================

 本マニュアルは、SKK オープンラボの有志の貢献により、従来のマニュアルに
加筆修正したものです。



File: skk.info, Node: SKKの歴史, Next: よくある質問とその回答(FAQ), Prev: 最新情報など, Up: Top

SKKの歴史
*********

 SKK の成り立ちと歴史に関しては以下の URL を参照してください。

SKK の誕生秘話

     `http://openlab.jp/skk/born-ja.html'

"SKK = I"

     `http://openlab.jp/skk/SKK.html'

SKK の歴史 (付 Emacs の歴史の一部)

     `http://openlab.jp/skk/history-ja.html'



File: skk.info, Node: よくある質問とその回答(FAQ), Next: 事項索引, Prev: SKKの歴史, Up: Top

よくある質問とその回答(FAQ)
***************************


 これは SKK に対するよくある質問と、それに対する回答集です。

* Menu:

* Introduction::                SKK のなぜなに。
* Installation::                SKK の入手から導入まで。
* Customization::               SKK の基本設定からお好みのカスタマイズまで。
* Dictionaries::                SKK 辞書関連。
* Miscellaneous::               SKK の活用法その他。



File: skk.info, Node: Introduction, Next: Installation, Prev: よくある質問とその回答(FAQ), Up: よくある質問とその回答(FAQ)

SKK のなぜなに
==============

* Menu:

* Q.1-1 最新のバージョンは?::
* Q.1-2 Daredevil SKK って SKK とは違うのですか?::
* Q.1-3 SKK はシンプルなのが長所だったのでは?::
* Q.1-4 DDSKK はどのバージョンの Emacs で使えますか?::
* Q.1-5 DDSKK はどんなオペレーティングシステムで使えますか?::
* Q.1-6 Emacs に付属の SKK を使っているのですが::
* Q.1-7 APEL に依存せずに SKK だけで済むように開発してもらえませんか?::
* Q.1-8 SKK の中に更にいくつもモードがあって良く分かりません。::



File: skk.info, Node: Q.1-1 最新のバージョンは?, Next: Q.1-2 Daredevil SKK って SKK とは違うのですか?, Prev: Introduction, Up: Introduction

Q.1-1 最新のバージョンは?
-------------------------

 現在、開発版の最新版は Daredevil SKK (以下「DDSKK」といいます) 13.x で
す。

 DDSKK 13.x の開発は cvs で行われ、日進月歩で進んでいます。cvs 上のソー
ス (repositry) が常に最新です。

 また、`http://openlab.jp/skk/maintrunk/' にアーカイブがあります。



File: skk.info, Node: Q.1-2 Daredevil SKK って SKK とは違うのですか?, Next: Q.1-3 SKK はシンプルなのが長所だったのでは?, Prev: Q.1-1 最新のバージョンは?, Up: Introduction

Q.1-2 Daredevil SKK って SKK とは違うのですか?
----------------------------------------------

 SKK Openlab で開発、リリースされる SKK は、京大の佐藤先生が中心になっ
て開発していた SKK と区別するために、`Daredevil SKK' と呼ぶことにしまし
た。その略称は `DDSKK' で、SKK Openlab で最初に`Daredevil SKK' としてリ
リースされた version は 11.1 です (オリジナルの version を継承しました)。

 なお、`Daredevil' の名前の採択は、開発陣の一人が講読している某ラジオ英
会話講座の、ある日のスキット名が「Daredevil なんとか」で、その内容は
「とにかくやってみよう。うぎゃぁぁぁ、やられたぁ」というものでした。こ
れがあまりに自分の開発ポリシーに合致していた、ということに由来します。



File: skk.info, Node: Q.1-3 SKK はシンプルなのが長所だったのでは?, Next: Q.1-4 DDSKK はどのバージョンの Emacs で使えますか?, Prev: Q.1-2 Daredevil SKK って SKK とは違うのですか?, Up: Introduction

Q.1-3 SKK はシンプルなのが長所だったのでは? 色々使わない機能があり過ぎるような。
--------------------------------------------------------------------------------

 かような議論は 10 年来行われてきており、結論は出ていませんが、事実とし
て現在まで開発が続けられています。

     「シンプルな操作性の維持と多機能化・高機能化は両立できる」

というのが現在の開発陣の考えであるようです。

 多機能化と言っても多くはユーザーオプションによって無効にすることができ
ますし、`skk.el' 本体が複雑化しないようにモジュール化されています。



File: skk.info, Node: Q.1-4 DDSKK はどのバージョンの Emacs で使えますか?, Next: Q.1-5 DDSKK はどんなオペレーティングシステムで使えますか?, Prev: Q.1-3 SKK はシンプルなのが長所だったのでは?, Up: Introduction

Q.1-4 DDSKK はどのバージョンの Emacs で使えますか?
--------------------------------------------------

 DDSKK 13.1 に関しては

   - Emacs 20.7 以降
   - Emacs 21.1 以降
   - Emacs 22.1
   - MULE 機能付きで作成された XEmacs 21.4.18 以降

がサポートしようとする対象の Emacs です。



File: skk.info, Node: Q.1-5 DDSKK はどんなオペレーティングシステムで使えますか?, Next: Q.1-6 Emacs に付属の SKK を使っているのですが, Prev: Q.1-4 DDSKK はどのバージョンの Emacs で使えますか?, Up: Introduction

Q.1-5 DDSKK はどんなオペレーティングシステムで使えますか?
---------------------------------------------------------

 基本的にサポート対象の Emacs がその OS で動いているなら、SKK の基本的
な機能は動くはずです。

 拡張機能については、UNIX の各種コマンドを前提としているものがいくつか
あります (`look' や `ispell' など)。これらがお使いの OS にもあれば該当
の拡張機能も基本的には使えるでしょう。

 Mac 版 Emacs に特化した情報については、以下のファイルを参照してくださ
い。
     `http://openlab.jp/skk/skk/main/READMEs/README.MacOSX.ja'
     `http://openlab.jp/skk/skk/main/READMEs/README.Mac.ja'



File: skk.info, Node: Q.1-6 Emacs に付属の SKK を使っているのですが, Next: Q.1-7 APEL に依存せずに SKK だけで済むように開発してもらえませんか?, Prev: Q.1-5 DDSKK はどんなオペレーティングシステムで使えますか?, Up: Introduction

Q.1-6 Emacs に付属の SKK を使っているのですが...
------------------------------------------------

 まず初めに言っておかなければなりませんが、

 「Emacs には SKK は付いていません」 (1)

 Emacs 20 には KKC というプログラムが付属し、Leim では KKC を利用した日
本語入力機能を提供しています。これは SKK の辞書を利用しているため、ミニ
バッファに「Loading skk/skkdic...done」と表示されますが、決して SKK が
動いている理由ではありません。

 Emacs 21 ではこの問題は既に解決されています。

--------- Footnotes ---------

(1)  Nemacs 3.3.2 には SKK 2.25 が付いていたりしますが...



File: skk.info, Node: Q.1-7 APEL に依存せずに SKK だけで済むように開発してもらえませんか?, Next: Q.1-8 SKK の中に更にいくつもモードがあって良く分かりません。, Prev: Q.1-6 Emacs に付属の SKK を使っているのですが, Up: Introduction

Q.1-7 APEL に依存せずに SKK だけで済むように開発してもらえませんか?
-------------------------------------------------------------------

 同様の議論が過去散々あり、本家は検討したいと言い、一方、中島は APEL を
使わない SKK の開発はやらない、と宣言したこともあって、部外の人からSKK
community 分裂か?、と冷かされたりもしました。

 悪いけど中島はやりません。せっかく良いものがあるのにそれを利用しないの
は、無駄な努力だと思うからです。APEL から独立する努力をする時間があれば、
その時間を使って APEL にもっと貢献したいです。

 APEL よりもっと遥かに効率の良いものができれば別ですが、それまでは
APEL を利用し続けます。

 もちろん、あなたが APEL 非依存版の作成をやりたいんだったら止めはしませ
ん。SKK Openlab に参加してやってもらっても良いですよ。但し、Maintrunk
とは別 branch にして下さいね。

*Note Q.2-4 APEL って何ですか?::.



File: skk.info, Node: Q.1-8 SKK の中に更にいくつもモードがあって良く分かりません。, Prev: Q.1-7 APEL に依存せずに SKK だけで済むように開発してもらえませんか?, Up: Introduction

Q.1-8 SKK の中に更にいくつもモードがあって良く分かりません。
------------------------------------------------------------

入力モード

     入力される文字別のモードには下記のものがあります。

              +------------------+--- skk-mode -----+--------------------+
              |                  |                  |                    |
              |                  |                  |                    |
          skk-j-mode      skk-latin-mode   skk-jisx0208-latin-mode skk-abbrev-mode
          (かな/カナモード) (ASCII モード)    (全英モード)        (SKK abbrev mode)

     ASCII モードと言うのは、`C-j' により `skk-j-mode' に移行する他は、
     全てのキーバインドは SKK を起動する前の状態と同一のモードです。
     SKK への入口が見えているモードと言えるかもしれません。

     SKK abbrev モードというのはアスキー文字を利用した変換ができるモー
     ドです。このファイルの後半にが活用例が出ていますので、ご覧下さい。

辞書登録モード

     辞書登録モードは、かな/カナモード、SKK abbrev モードで変換した際、
     候補が見つからないときに辞書登録をするサブモードです。

変換モード

     入力文字がそのままバッファに挿入され、変換をしないモードを確定入力
     モードと言い、■モード、と呼びます。

     バッファに`▽'のマーカが出て変換する文字の見出し語を入力するモード
     を▽モードと呼びます。

     ▽モードから SPC を押して変換候補の選択をするモードを▼モードと呼
     びます。バッファに挿入されている`▽'のマーカが`▼'に変わります。



File: skk.info, Node: Installation, Next: Customization, Prev: Introduction, Up: よくある質問とその回答(FAQ)

SKK の入手から導入まで
======================

* Menu:

* Q.2-1 最新版の SKK はどこから入手できますか?::
* Q.2-2 SKK を入手しましたが、辞書が付いていないのですが。::
* Q.2-3 SKK を入手しましたが、サーバが付いていないのですが。::
* Q.2-4 APEL って何ですか?::
* Q.2-5 色々別に入手するものがあってインストールが難しいですね。::
* Q.2-6 Emacs 20 に SKK 9.6 がインストールできません。::



File: skk.info, Node: Q.2-1 最新版の SKK はどこから入手できますか?, Next: Q.2-2 SKK を入手しましたが、辞書が付いていないのですが。, Prev: Installation, Up: Installation

Q.2-1 最新版の SKK はどこから入手できますか?
--------------------------------------------

     `http://openlab.jp/skk/cvs-ja.html'

をご覧の上、SKK Openlab の CVS から入手できるものが最も新しいです。

 最も新しくなくて良ければ、

     `http://openlab.jp/skk/maintrunk'

からどうぞ。

 各アーカイブの種類については、*Note Q.1-1 最新のバージョンは?:: をご覧
下さい。



File: skk.info, Node: Q.2-2 SKK を入手しましたが、辞書が付いていないのですが。, Next: Q.2-3 SKK を入手しましたが、サーバが付いていないのですが。, Prev: Q.2-1 最新版の SKK はどこから入手できますか?, Up: Installation

Q.2-2 SKK を入手しましたが、辞書が付いていないのですが。
--------------------------------------------------------

     `http://openlab.jp/skk/dic-ja.html'

から別に入手して下さい。SKK Openlab の CVS には最新版があります。



File: skk.info, Node: Q.2-3 SKK を入手しましたが、サーバが付いていないのですが。, Next: Q.2-4 APEL って何ですか?, Prev: Q.2-2 SKK を入手しましたが、辞書が付いていないのですが。, Up: Installation

Q.2-3 SKK を入手しましたが、サーバが付いていないのですが。
----------------------------------------------------------

 DDSKK 13 は サーバの種類、バージョンには依存していません。

     `http://openlab.jp/skk/skkserv-ja.html'

からお好きなサーバを入手して下さい。



File: skk.info, Node: Q.2-4 APEL って何ですか?, Next: Q.2-5 色々別に入手するものがあってインストールが難しいですね。, Prev: Q.2-3 SKK を入手しましたが、サーバが付いていないのですが。, Up: Installation

Q.2-4 APEL って何ですか?
------------------------

 APEL は A Portable Emacs Library の略で、XEmacs/GNU Emacs 間、あるいは
Emacs のそれぞれのバージョン間の差異を吸収するパッケージです。

 元は FLIM/SEMI のために開発されたものですが、旧 SKK で培ったバージョン
間の work around のノウハウを全部反映してもらいましたので、APEL 自体、
大幅に汎用性がアップしています。



File: skk.info, Node: Q.2-5 色々別に入手するものがあってインストールが難しいですね。, Next: Q.2-6 Emacs 20 に SKK 9.6 がインストールできません。, Prev: Q.2-4 APEL って何ですか?, Up: Installation

Q.2-5 色々別に入手するものがあってインストールが難しいですね。昔は全部一つで簡単だったのに。
--------------------------------------------------------------------------------------------

 辞書やサーバーの配布が別なのは、それぞれアップデートされる頻度が異なる
からです。毎回超特大のアーカイブを入手させられてもあなたは文句を言うで
しょう。

 また、APEL のおかげでそれだけ多くの Emacsen で動きます。APEL に感謝こ
そすれ、恨むのは筋違いでしょう。*Note Q.2-4 APEL って何ですか?::.



File: skk.info, Node: Q.2-6 Emacs 20 に SKK 9.6 がインストールできません。, Prev: Q.2-5 色々別に入手するものがあってインストールが難しいですね。, Up: Installation

Q.2-6 Emacs 20 に SKK 9.6 がインストールできません。
----------------------------------------------------

 SKK 9.6 は Emacs 20 がリリースされる以前のバージョンで、Emacs 20 に対
応していません。実際使えないことが確認されています。

     `http://openlab.jp/skk/maintrunk'

にて公開されている SKK は Emacs 20 に対応していますから、それをインストー
ルしてください。



File: skk.info, Node: Customization, Next: Dictionaries, Prev: Installation, Up: よくある質問とその回答(FAQ)

SKK の基本設定からお好みのカスタマイズまで
==========================================

* Menu:

* Q.3-1 インジケータをモード行の左端に置きたいのですが。::
* Q.3-2 「．」、「，」 が入力できるようにカスタマイズしたいのですが。::
* Q.3-3 「ゐ」や「ヰ」 が入力できるようにカスタマイズしたいのですが。::
* Q.3-4 skk-input-vector と skk-roma-kana-a が見当たりませんが。::
* Q.3-5 検索する辞書を増やしたいのですが。::
* Q.3-6 左手の小指を SHIFT で酷使したくありません。::
* Q.3-7 全く漢字が出てきません。::
* Q.3-8 チュートリアルが起動できません。::
* Q.3-9 スペースを押しても変換できません。::



File: skk.info, Node: Q.3-1 インジケータをモード行の左端に置きたいのですが。, Next: Q.3-2 「．」、「，」 が入力できるようにカスタマイズしたいのですが。, Prev: Customization, Up: Customization

Q.3-1 インジケータをモード行の左端に置きたいのですが。
------------------------------------------------------

`~/.skk' に

     (setq skk-status-indicator 'left)

と書いてみてください。



File: skk.info, Node: Q.3-2 「．」、「，」 が入力できるようにカスタマイズしたいのですが。, Next: Q.3-3 「ゐ」や「ヰ」 が入力できるようにカスタマイズしたいのですが。, Prev: Q.3-1 インジケータをモード行の左端に置きたいのですが。, Up: Customization

Q.3-2 `.' で「．」、`,' で「，」 が入力できるようにカスタマイズしたいのですが。
-------------------------------------------------------------------------------

 3通りの方法を紹介します。

  1. 通常 `.' で「．」、`,' で「，」を入力したい場合

     `~/.skk'に以下を設定します。

          (setq skk-kutouten-type 'en)

  2. 一時的に `.' で「．」、`,' で「，」を入力したい場合

     `M-x skk-toggle-kutouten' を実行すると、その場で「，」「．」に切り
     替えることができます。「、」「。」に戻すには、もう一度`M-x
     skk-toggle-kutouten' を実行を実行します。特定のバッファでのみ「，」
     「．」に切り替えたい場合は、 File Variables (*Note File
     Variables: (emacs)File Variables.)  を参照下さい。例えば、 tex モー
     ドでのみ「，」「．」に切り替えたい場合は、つぎの設定をtexファイル
     の最後に追加します。

          % Local Variables:
          % skk-kutouten-type: en
          % end:

  3. 常に `.' で「．」、`,' で「，」を入力したい場合

     `skk-rom-kana-rule-list'を直接変更します。なお、この設定をすると、
     `M-x skk-toggle-kutouten' での切り替えが効かなくなるので、注意して
     下さい。


     `~/.skk' に以下を追加します。

          (setq skk-rom-kana-rule-list
                (append '(("." nil "．") ("," nil "，"))
                        skk-rom-kana-rule-list))

     この設定方法は応用が効き、細かく制御することが可能です。`．' と
     `，' のところをそれぞれ、`.' と `,' とすることで、「かなモード」
     「カナモード」でも、`.' と`,' を直接入力することができます。



File: skk.info, Node: Q.3-3 「ゐ」や「ヰ」 が入力できるようにカスタマイズしたいのですが。, Next: Q.3-4 skk-input-vector と skk-roma-kana-a が見当たりませんが。, Prev: Q.3-2 「．」、「，」 が入力できるようにカスタマイズしたいのですが。, Up: Customization

Q.3-3 `wi' で、「ゐ」や「ヰ」 が入力できるようにカスタマイズしたいのですが。
----------------------------------------------------------------------------

 一つ前の Q. の変形問題ですね。かな/カナモードでそれぞれ出力する文字を
変えるやり方です。

`~/.skk' に

     (setq skk-rom-kana-rule-list
           (append '(("wi" nil ("ヰ" . "ゐ")))
                   skk-rom-kana-rule-list))

と書いてみましょう。

 一番内側の cons cell は car がカナモード、cdr がかなモードでの入力文字
を表しています。

 一つ前の Q. に対する答えのように、カナモード、かなモードともに入力する
文字が変わらなければ、cons cell の代りに文字列を書くことができます。



File: skk.info, Node: Q.3-4 skk-input-vector と skk-roma-kana-a が見当たりませんが。, Next: Q.3-5 検索する辞書を増やしたいのですが。, Prev: Q.3-3 「ゐ」や「ヰ」 が入力できるようにカスタマイズしたいのですが。, Up: Customization

Q.3-4 `skk-input-vector' と `skk-roma-kana-a' が見当たりませんが。
------------------------------------------------------------------

 廃止されました (キッパリ)。

その昔、かな/カナモードの入力系統をカスタマイズする変数は沢山ありまし
たが、SKK 10.x 以降では `skk-rom-kana-base-rule-list' と
`skk-rom-kana-rule-list' に統合されました。

 前者は標準的なキー入力を定めています。後者は、好みに左右されるものを定
義しています。いずれもユーザー変数ですが、後者はリスト操作を容易にする
ためにデフォルトの要素数を少なくしています。後者の設定は前者のものを上
書きします。



File: skk.info, Node: Q.3-5 検索する辞書を増やしたいのですが。, Next: Q.3-6 左手の小指を SHIFT で酷使したくありません。, Prev: Q.3-4 skk-input-vector と skk-roma-kana-a が見当たりませんが。, Up: Customization

Q.3-5 検索する辞書を増やしたいのですが。
----------------------------------------

`skk-search-prog-list' で設定をしましょう。

まず、現在の設定を確認しましょうね。*scratch* バッファに
`skk-search-prog-list' と書いてそのシンボルの末尾にポイントを置いて
`C-j' してみましょう。例えば次のように出力されます。

     ((skk-search-jisyo-file skk-jisyo 0 t)
      (skk-search-server skk-aux-large-jisyo 10000))

 上記の例は 2 つの要素を持ったリストになっています。設定によりもっと多
くの要素があるかもしれません。

 各要素は検索する関数と辞書を指定したリストです。要素の順番に検索がなさ
れます。上記の例だとまず最初に `skk-jisyo' (個人辞書) を
`skk-search-jisyo' という関数を使ってリニアサーチ、次に
`skk-search-server' という関数を使って `skk-aux-large-jisyo' をサーチし
ます。

 変換の際、SPC を押しますよね?  1 回 SPC を押すと、SKK は候補が見つかる
までの間、`skk-search-prog-list' の要素を前から読んでいって検索を行い、
見つかればそこで一旦検索を止めてユーザに候補を提示します。

 ユーザが SPC を更に押してゆき最初の要素のプログラムが見つけた候補が尽
きると、SKK は中断していた個所から再び `skk-search-prog-list' の次の要
素を見つけ、ここで指定されている関数を使って検索する、で新しい候補が見
つかればまた提示する、というシステムになっています。

では、サーバを使って検索した後に、JIS 第 2 水準の単漢字辞書、
`SKK-JISYO.JIS2' を検索したい場合はどうすれば良いでしょう?  もう分
かりますよね?  サーバを使った検索式の次に第 2 水準辞書の検索式を書いた
リストを `skk-search-prog-list' に指定すれば良いのです。
`~/.skk' に次のように書きましょう。

     (setq skk-search-prog-list
           '((skk-search-jisyo-file skk-jisyo 0 t)
             (skk-search-server skk-aux-large-jisyo 10000)
             (skk-search-jisyo-file "~/dic/SKK-JISYO.JIS2" 0)))

 `skk-search-jisyo-file' の第 2 引数、0 の数字はリニアサーチにて検索す
るよう指定しています。第 2 水準辞書はあまり大きくないので、リニアサーチ
で十分でしょう。大きな辞書を検索する場合などは、

     (skk-search-jisyo-file "~/dic/SKK-JISYO.L" 10000)

のようにすると良いでしょう。SKK は Emacs のバッファに読み込まれた
`~/dic/SKK-JISYO.L' の検索リージョンのポイント差が 10,000 未満になるま
ではバイナリサーチを行い、その後リニアサーチを行います。大きな辞書では
バイナリサーチを行う方がはるかに効率が良いです。嘘だと思うなら、
`SKK-JISYO.L' を読み込んでリニアサーチするような設定にして試してみて下
さい。

 ちなみに、`SKK-JISYO.JIS2' は、最大でもリージョン間のポイント差が
8,500 程度です。



File: skk.info, Node: Q.3-6 左手の小指を SHIFT で酷使したくありません。, Next: Q.3-7 全く漢字が出てきません。, Prev: Q.3-5 検索する辞書を増やしたいのですが。, Up: Customization

Q.3-6 左手の小指を SHIFT で酷使したくありません。
-------------------------------------------------

SKK を標準の状態で使っている場合、変換のためにシフトキーを多用しますの
で小指への負担が大きくなります。 (1)

 この苦しみを回避するためにここでは 3 つの方法を紹介します。

  1. 親指の近くにあるキーを利用してシフトキーの代用とする。

     日本語 106 キーボードのように無変換、変換などのキーがある場合は、
     これらをシフトキーの代用とすることが可能です。こうすると、例えば

          SHIFT を押しながら a を押す

     というキー操作は

          無変換 を押して、その後で a を押す

     という操作で置き換えることができるようになります。

     それでは具体的なやり方を説明しましょう。まず、使用中の Emacs が無
     変換キーを何という名前で認識しているか調べます。それには

          M-x describe-key

     というコマンドを実行し、続いて 無変換キーを押してみます。XFree86
     上でなら、おそらく

          muhenkan is undefined

     という答えが返ってくるでしょう。次に、この名前を使って `~/.emacs'
     に設定を書きこみます。以下は 無変換 = muhenkan の場合の例です。

          (unless (keymapp key-translation-map)
            (setq key-translation-map (make-sparse-keymap)))

          (let ((i ?a))
            (while (<= i ?z)
              (define-key key-translation-map
                          (vector 'muhenkan i) (vector (- i 32)))
              (setq i (1+ i))))

     この設定を終えると、`muhenkan-a' で `A' が入力できるように
     なります。つづいて、SKK を起動してみましょう。`muhenkan-a' で
     `▽あ' となります。送りの開始点も、もちろん同様の操作で指定できます。 (2)

  2. xmodmap を使う。

     X Window System 上では、xmodmap というプログラムを使ってキー配列を
     変更できます。例えば、無変換キーをシフトキーとして使いたければ

          % xmodmap -e 'add Shift = Muhenkan'

     とします。これで無変換キーは通常のシフトキーと同じような感じで使え
     るようになります。

  3. 親指シフト入力のエミュレーション機能を利用する。

     これは 1, 2 とはかなり違ったアプローチです。SKK 本来のローマ字的入
     力を捨てて、富士通のワープロ OASYS のような親指シフト入力を修得し
     ます。 (3)

     この機能は、SKK 10 では利用できません。Daredevil SKK 11.3 以降には、
     NICOLA-DDSKK というプログラムが付属しており、これをインストールす
     ると親指シフト入力が可能になります。インストール自体は簡単で、

          % cd experimental/nicola (Daredevil SKK 11.4 以降 では cd nicola )
          % make install

     とした後に、`~/.skk' に

          (setq skk-use-kana-keyboard t)
          (setq skk-kanagaki-keyboard-type 'omelet-jis)

     と書くだけです。詳しいことは、NICOLA-DDSKK 付属のドキュメントを参
     照してください。

     NICOLA 配列は、特別に日本語入力のために考えられた配列なので、慣れ
     れば非常に効率的な日本語入力ができるようになると期待されます。一方
     で、ローマ字的入力方式に慣れてしまっている人にとっては、NICOLA 配
     列に慣れるまでかなり練習を要することは確かです。

--------- Footnotes ---------

(1)  このため、ある人々は SKK を小指キラーと呼びます。

(2) 変数 `key-translation-map' の意味を調べてみてください。

`M-x describe-variable' RET key-translation-map

 (3) 親指シフト入力の詳細については、ここでは述べません。興味がある場合
は、日本語入力コンソーシアムの Web サイト

     `http://nicola.sunicom.co.jp/'

を訪れてください。



File: skk.info, Node: Q.3-7 全く漢字が出てきません。, Next: Q.3-8 チュートリアルが起動できません。, Prev: Q.3-6 左手の小指を SHIFT で酷使したくありません。, Up: Customization

Q.3-7 全く漢字が出てきません。
------------------------------

 恐らく辞書の設定ができていないのでしょう。

 `SKK-JISYO.L' というファイルがインストールされている場所を確認してくだ
さい。普通は

     `/usr/local/share/skk'
     `/usr/share/skk'

といった場所にインストールされています。XEmacs のパッケージならば

     `/usr/local/lib/xemacs/mule-packages/etc/skk'

などを確認します。その後で `~/.skk' に

     (setq skk-large-jisyo "/usr/local/share/skk/SKK-JISYO.L")

のように設定します。

 なお、辞書サーバを使っている場合はこの設定は必要ありません。その場合は、
辞書サーバの設定や、それがちゃんと起動しているかどうかを確認してくださ
い。

 また、どこにも辞書がインストールされていない場合は

     `http://openlab.jp/skk/dic/'

から取得します。



File: skk.info, Node: Q.3-8 チュートリアルが起動できません。, Next: Q.3-9 スペースを押しても変換できません。, Prev: Q.3-7 全く漢字が出てきません。, Up: Customization

Q.3-8 チュートリアルが起動できません。
--------------------------------------

 `SKK.tut' というファイルがインストールされている場所を確認してください。
普通は

     `/usr/local/share/skk'
     `/usr/share/skk'

といった場所にインストールされています。XEmacs のパッケージならば

     `/usr/local/lib/xemacs/mule-packages/etc/skk'

などを確認します。その後で `~/.emacs' に

     (setq skk-tut-file "/usr/local/share/skk/SKK.tut")

のように設定します。



File: skk.info, Node: Q.3-9 スペースを押しても変換できません。, Prev: Q.3-8 チュートリアルが起動できません。, Up: Customization

Q.3-9 スペースを押しても変換できません。
----------------------------------------

 以前のバージョンの SKK では、SKK を使う前に Canna の設定がされていると、
スペースを押しても空白が挿入されるだけで変換できない、というバグがあり
ました。これは SKK 10.62 以降では修正されています。

 なお、このバグに対処するために

     (setq canna-use-space-key-as-henkan-region nil)

と設定していた場合は、もはやその必要はないので消して構いません。



File: skk.info, Node: Dictionaries, Next: Miscellaneous, Prev: Customization, Up: よくある質問とその回答(FAQ)

SKK 辞書関連
============

* Menu:

* Q.4-1 Wnn でも Canna でも郵便番号辞書が使えるけれど、SKK では?::
* Q.4-2 SKK の辞書には、品詞情報がないんですね。::
* Q.4-3 SKK には辞書をマージするプログラムは付いてないの?::
* Q.4-4 SKK 形式の英和辞書があると聞いたのですが。::



File: skk.info, Node: Q.4-1 Wnn でも Canna でも郵便番号辞書が使えるけれど、SKK では?, Next: Q.4-2 SKK の辞書には、品詞情報がないんですね。, Prev: Dictionaries, Up: Dictionaries

Q.4-1 Wnn でも Canna でも郵便番号辞書が使えるけれど、SKK では使えないの?
------------------------------------------------------------------------

 CVS から辞書を取得した場合は、`zipcode' というディレクトリに入っていま
す。WWW では、

     `http://openlab.jp/skk/dic/'

より入手できます。使用方法は、`zipcode/README.ja' を御覧下さい。



File: skk.info, Node: Q.4-2 SKK の辞書には、品詞情報がないんですね。, Next: Q.4-3 SKK には辞書をマージするプログラムは付いてないの?, Prev: Q.4-1 Wnn でも Canna でも郵便番号辞書が使えるけれど、SKK では?, Up: Dictionaries

Q.4-2 SKK の辞書には、品詞情報がないんですね。
----------------------------------------------

 はい、そうです。品詞情報がなくとも効率の良い入力ができるシステムが
SKK です。



File: skk.info, Node: Q.4-3 SKK には辞書をマージするプログラムは付いてないの?, Next: Q.4-4 SKK 形式の英和辞書があると聞いたのですが。, Prev: Q.4-2 SKK の辞書には、品詞情報がないんですね。, Up: Dictionaries

Q.4-3 SKK には辞書をマージするプログラムは付いてないの?
-------------------------------------------------------

 SKK 本体のパッケージには同封されていませんが、skk-tools という別パッケー
ジがあり、

     `http://openlab.jp/skk/tools-ja.html'

から入手可能です。



File: skk.info, Node: Q.4-4 SKK 形式の英和辞書があると聞いたのですが。, Prev: Q.4-3 SKK には辞書をマージするプログラムは付いてないの?, Up: Dictionaries

Q.4-4 SKK 形式の英和辞書があると聞いたのですが。
------------------------------------------------

 edict は和英辞書ですが、これを SKK 辞書形式の英和辞書に変換したものを

     `http://openlab.jp/skk/dic/SKK-JISYO.edict'

として置いています。これは edict を単純に機械的に変換した後、バグの修正
や、エントリ・候補の追加が SKK Openlab で独自に行われているものです。

 edict を自分で加工して上記と同等のものを作成することもできます。edict
は

     `ftp://ftp.u-aizu.ac.jp:/pub/SciEng/nihongo/ftp.cc.monash.edu.au/'

などから入手できます。

 加工には日本語の通る `gawk' と skk-tools の中のプログラムを使い、下記
のように行います。

     % jgawk -f edict2skk.awk edict > temp
     % skkdic-expr temp | skkdic-sort > SKK-JISYO.E2J
     % rm temp

 できた `SKK-JISYO.E2J' の利用方法は色々ありますが、

     % skkdic-expr SKK-JISYO.E2J + /usr/local/share/skk/SKK-JISYO.L | \
       skkdic-sort > SKK-JISYO.L

などとして、`SKK-JISYO.L' とマージして使うのが手軽です。

 なお、edict の配布条件は GNU GPL (General Public License) ではありませ
ん。

     `http://www.csse.monash.edu.au/groups/edrdg/newlic.html'

をご覧下さい。`SKK-JISYO.edict' のヘッダー部分にもそのダイジェストが記
載されています。



